[1,["604bgZVfpAl4v0MBj2949H","feOW1o8JZFp6lh8k5UpwcY","0fF8DGS71NYqSLuA46K9rx@27868","ffgb2W1N9AHamGOUHePTr3","37GgAuvJtPda5fmkM2lEJ9","12Y9dMgWdJKJGmTiZyQR9H@2e76e","a3zQCfCrBCDZJ4uf2rk5u8","e7IBBqvldFo7I5qhXgjSlA@f9941","8aFFZWwzxA+o1Yuvfnzpla","a3cULLHIJLPbiHK+MdBgoY@f9941","32x2mLoUlCVbhQq3XMow1c@f9941","eaTX9OYDRPha9xKlZfesLe@f9941","c3OC7+kuZIGp19ZXl8Kp4o@f9941","b2pwNN+GdNQbmMF6l+R817@f9941","42DJ0cYP9KN7x48B4u9WwH","23UbvDhdFKfL7jdFhlT1iT@6c48a","232xBSDVRAvK1Ayj1/klL5@6c48a","0dlMd1SYVAg52Dh+vD/CGE@f9941","5fL+CiKYVEBrRDj/qOiJq7@f9941","ebVvWHQb5G3ahMbPiHcFVl","f17fmFjp5FDJyqhuvzM/i7@f9941","d8I9JGiihE/ICki6vUsEOb","c9DW/pETlIL7sVQ55o9muW@f9941","53pzUu3j1I1ZfCqBBt/VXV","8cqAcO3xxJJYFUeOiDmE5V@f9941","23UbvDhdFKfL7jdFhlT1iT@f9941","ddbOav9g9D5LMYdR7SS9Kg@f9941","ddchPvxqhFqLVWYMwJPTtj@f9941","17qXRvKRhHOrGJ1QRoPWtB","25XJ17OqpKk6bN6VrJ4GeY","50OkfigeNDXayP5JCCZhFZ@f9941","8e7j8daqVA4IWHjf2J+NgF@f9941","232xBSDVRAvK1Ayj1/klL5@f9941","64BeoZg99FMYGwoMtTO1+k","4bbqLR675DM7gRFbxUnJ5m@f9941","c17Fh5gShEm5YN/G1vMxDm@f9941","88zjkfgHNLl7PDCFfEBNht","68ZfIp7XRI8Ywd2+0VKkcq@f9941","66aQ9X8wtBPJe9bgFHSqad@f9941","32x2mLoUlCVbhQq3XMow1c@6c48a","f5OtjJANBG1I78zyAceGk7@6c48a","1brw/JvvpFnIvdrxpFCgMZ","4bbqLR675DM7gRFbxUnJ5m@6c48a","50OkfigeNDXayP5JCCZhFZ@6c48a","f5MzNN6wZAqaHZTo6RiICb","5fL+CiKYVEBrRDj/qOiJq7@6c48a","a2NaNxVvRFpoClLx6HhxFD@6b764","a2NaNxVvRFpoClLx6HhxFD@3face","753ZlYPXlIubkypSSwEigF","eam+hYywlN456wSRUs5jk4","66aQ9X8wtBPJe9bgFHSqad@6c48a","68ZfIp7XRI8Ywd2+0VKkcq@6c48a","a6wfzfPfhPxrsCW0EASal1@f9941","8cqAcO3xxJJYFUeOiDmE5V@6c48a","8e7j8daqVA4IWHjf2J+NgF@6c48a","a3cULLHIJLPbiHK+MdBgoY@6c48a","b2pwNN+GdNQbmMF6l+R817@6c48a","b54OQvawdN0JtBupXCLFxl@6c48a","c17Fh5gShEm5YN/G1vMxDm@6c48a","c3OC7+kuZIGp19ZXl8Kp4o@6c48a","c9DW/pETlIL7sVQ55o9muW@6c48a","f8yHY6T05HAJYYfhJaPew+","ddbOav9g9D5LMYdR7SS9Kg@6c48a","ddchPvxqhFqLVWYMwJPTtj@6c48a","e7IBBqvldFo7I5qhXgjSlA@6c48a","eaTX9OYDRPha9xKlZfesLe@6c48a","b7VOSVpQJJXKEgevWOQkae","f17fmFjp5FDJyqhuvzM/i7@6c48a","bfBEghNoZPsqTPiuEwPwfa@6c48a","a2OHCef4REKZftJlRaYqan@6c48a","a6g2ZYQOhJ7qhtef+k+tPY@6c48a","c0DJX+lctNtJuzAa9LdWDF"],["node","_spriteFrame","_textureSource","_defaultClip","_mesh","targetInfo","root","data","mainTexture","_effectAsset","asset","_parent","_normalSprite","moneyIconSprite","Node2","Node1","addSprite","btnGetLabel2","btnGetLabel1","titleLabel","keyNumLabel","progressSprite","moneyLabel","aniLottery","lbRewardNum","spRewardIcon","ndReward","ndBoxContent","ndLottery","ndSkin","lbSkinProgress","ndArrow","lbBtnMultiple","lbDiamondDouble","lbDiamondNormal","spIcon","ndBtnDouble","ndBtnNormal","ndList","lbMultiple","lbDiamond","lbPeople","ndMultiple","ndDiamond","ndPeople","value","pbBoxDiamond","sfKey","_font","spriteFrame"],["cc.SpriteFrame",["cc.Node",["_name","_layer","_active","_objFlags","__editorExtras__","_prefab","_components","_parent","_children","_lpos","_lscale","_lrot","_euler"],-2,4,9,1,2,5,5,5,5],["cc.Label",["_string","_actualFontSize","_fontSize","_lineHeight","_isBold","_cacheMode","_isSystemFontUsed","_horizontalAlign","node","__prefab","_color"],-5,1,4,5],["cc.Widget",["_alignFlags","_top","_verticalCenter","_originalWidth","_originalHeight","_bottom","_left","node","__prefab"],-4,1,4],["cc.Sprite",["_sizeMode","_type","_fillRange","node","__prefab","_spriteFrame","_color"],0,1,4,6,5],["cc.Node",["_name","_layer","_active","_parent","_components","_prefab","_lpos","_children"],0,1,12,4,5,2],["cc.Layout",["_layoutType","_resizeMode","_spacingX","_paddingLeft","_paddingRight","_isAlign","node","__prefab"],-3,1,4],["cc.UITransform",["node","__prefab","_contentSize","_anchorPoint"],3,1,4,5,5],["cc.Animation",["playOnLoad","node","__prefab","_clips","_defaultClip"],2,1,4,3,6],["cc.MeshRenderer",["_name","_shadowCastingMode","node","__prefab","_materials","bakeSettings","_mesh"],1,1,4,3,4,6],["cc.Material",["_name","_states","_defines","_techIdx","_props"],-1,12],["cc.Mesh",["_native","_hash","_struct"],1,11],["cc.Prefab",["_name"],2],["cc.CompPrefabInfo",["fileId"],2],["cc.BlockInputEvents",["node","__prefab"],3,1,4],["9581axEuWZE7KfiJ/iuIUP3",["node","__prefab","ndPeople","ndDiamond","ndMultiple","lbPeople","lbDiamond","lbMultiple","ndList","ndBtnNormal","ndBtnDouble","spIcon","lbDiamondNormal","lbDiamondDouble","lbBtnMultiple","ndArrow","lbSkinProgress","ndSkin","ndLottery","ndBoxContent","ndReward","spRewardIcon","lbRewardNum","aniLottery","moneyLabel","progressSprite","keyNumLabel","titleLabel","btnGetLabel1","btnGetLabel2","addSprite","Node1","Node2","moneyIconSprite","pbBoxDiamond","sfKey"],3,1,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,6,6],["cc.PrefabInfo",["fileId","instance","targetOverrides","root","asset","nestedPrefabInstanceRoots"],0,1,1,2],["cc.PrefabInfo",["fileId","instance","targetOverrides","nestedPrefabInstanceRoots","root","asset"],-1,1,1],["cc.PrefabInfo",["fileId","targetOverrides","nestedPrefabInstanceRoots","root","instance","asset"],0,1,4,6],["cc.Button",["_transition","node","__prefab","clickEvents","_normalSprite"],2,1,4,9,6],["cc.ClickEvent",["_componentId","handler","target"],1,1],["cc.TargetInfo",["localID"],2],["cc.PrefabInstance",["fileId","prefabRootNode","propertyOverrides"],2,1,9],["CCPropertyOverrideInfo",["value","propertyPath","targetInfo"],1,1],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,1,8],["CCPropertyOverrideInfo",["value","propertyPath","targetInfo"],1,4],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,1,6],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,4,8],["cc.ModelBakeSettings",[],3],["cc.BoxCollider",["_isTrigger","node","__prefab","_center","_size"],2,1,4,5,5],["cc.RigidBody",["_group","_type","node","__prefab"],1,1,4],["22742G80J5JtZSWiz+7tDBU",["colliderName","node","__prefab"],2,1,4],["cc.BitmapFont",["_name","fontSize","fntConfig"],0],["cc.EffectAsset",["_name","shaders","techniques"],0]],[[13,0,2],[17,0,1,2,3,4,5,5],[7,0,1,2,1],[28,1],[8,1,2,3,4,1],[5,0,1,3,4,5,6,3],[1,0,1,7,8,6,5,9,3],[1,0,1,7,8,5,3],[1,0,1,7,6,5,11,10,12,3],[1,0,1,7,8,6,5,9,11,10,12,3],[9,2,3,4,5,6,1],[1,0,1,7,6,5,9,3],[4,3,4,5,1],[21,0,2],[7,0,1,1],[24,0,1,2,2],[7,0,1,2,3,1],[2,0,1,2,3,4,8,9,6],[4,0,3,4,5,2],[23,0,1,2,3],[12,0,2],[2,0,1,2,3,4,8,9,10,6],[1,0,1,7,8,6,5,10,3],[1,3,4,7,5,3],[18,0,1,2,3,4,5,4],[4,3,4,1],[22,0,1,2,2],[25,0,1,2,3],[11,0,1,2,3],[1,0,6,5,11,10,12,2],[10,0,3,1,2,4,5],[9,0,2,3,4,5,6,2],[1,0,1,8,6,5,3],[1,0,1,7,6,5,9,10,3],[3,0,3,4,7,8,4],[3,0,5,7,8,3],[3,0,1,2,7,8,4],[8,1,2,3,1],[6,1,0,3,4,2,5,6,7,7],[19,0,1,2,3,4,2],[20,0,1,2,3],[2,0,1,2,3,4,5,8,9,10,7],[10,0,1,2,4,4],[9,1,2,3,4,5,6,2],[1,0,2,1,7,8,6,5,9,4],[1,0,1,7,8,6,5,3],[1,0,1,7,6,5,3],[1,0,2,1,7,6,5,9,4],[1,0,1,8,5,9,11,12,3],[1,0,1,8,5,3],[1,0,1,7,6,5,9,11,10,12,3],[5,0,1,3,7,4,5,6,3],[5,0,2,1,3,4,5,6,4],[5,0,1,3,4,5,3],[14,0,1,1],[15,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,1],[3,0,2,7,8,3],[3,0,6,1,7,8,4],[3,0,1,7,8,3],[8,0,1,2,3,4,2],[16,0,1,2,3,4,5,4],[6,1,0,3,4,6,7,5],[6,1,0,2,5,6,7,5],[6,0,2,6,7,3],[4,1,0,3,4,5,3],[4,0,3,4,6,5,2],[4,1,0,2,3,4,4],[26,0,1,2,2],[27,0,1,2,2],[2,0,1,3,4,8,9,5],[2,0,1,2,6,8,9,5],[2,0,1,2,3,8,9,10,5],[2,0,7,1,2,3,4,8,9,10,7],[29,0,1,2,3,4,2],[30,0,1,2,3,3],[31,0,1,2,2],[32,0,1,2,4],[33,0,1,2,4]],[[[[28,".bin",945844047,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":5520,"length":288,"count":144,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":5520,"count":115,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.04437822103500366,-0.02553694136440754,-4.911422593067982e-7],"maxPosition",8,[1,0.04437822103500366,0.02553694136440754,0.11175717413425446]]],-1],0,0,[],[],[]],[[{"name":"game_turntable_go@2x","rect":{"x":0,"y":0,"width":74,"height":39},"offset":{"x":0,"y":0},"originalSize":{"width":74,"height":39},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-37,-19.5,0,37,-19.5,0,-37,19.5,0,37,19.5,0],"indexes":[0,1,2,2,1,3],"uv":[0,39,74,39,0,0,74,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-37,"y":-19.5,"z":0},"maxPos":{"x":37,"y":19.5,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[2],[15]],[[{"name":"game_bg1@2x","rect":{"x":0,"y":0,"width":128,"height":54},"offset":{"x":0,"y":0},"originalSize":{"width":128,"height":54},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-64,-27,0,64,-27,0,-64,27,0,64,27,0],"indexes":[0,1,2,2,1,3],"uv":[0,54,128,54,0,0,128,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-64,"y":-27,"z":0},"maxPos":{"x":64,"y":27,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[2],[16]],[[[20,"settlementSuccessPanel"],[32,"settlementSuccessPanel",33554432,[-43,-44,-45,-46,-47,-48,-49,-50,-51],[[2,-6,[0,"ec3hAAZV1JlbN5y2hcsw1w"],[5,750,1496]],[54,-7,[0,"28iqJ1RiVDx6aRogSOHprV"]],[55,-40,[0,"5bm1Hl655KSqXQ5lXxMfKk"],-39,-38,-37,-36,-35,-34,-33,-32,-31,-30,-29,-28,-27,-26,-25,-24,-23,-22,-21,-20,-19,-18,-17,-16,-15,-14,-13,-12,-11,-10,-9,-8,29,30],[34,45,720,1280,-41,[0,"56YuAUkcdANprAC9/4Hns0"]],[4,-42,[0,"4cFVz93QJKPI3WhZgB6eEX"],[31],32]],[60,"adP4CY9vxHaJeEMaeDs/CJ",null,null,-5,0,[-1,-2,-3,-4]]],[32,"list",33554432,[-55,-56,-57,-58,-59,-60,-61],[[2,-52,[0,"e7Rw8pQfpDppWjlhyH/mj1"],[5,502,140]],[61,1,1,62,-32,-53,[0,"2aKa50t+lHa7xnUKlnauBZ"]],[64,1,0,-54,[0,"9el5lm195Duocv/a2ZyCLx"],8]],[1,"c38VLUy41CeLzts1OMMuVu",null,null,null,1,0]],[51,"lottery",33554432,1,[-66,-67],[[[2,-62,[0,"cbOhSjLEdG2I4rK78O0lOX"],[5,574,308]],[12,-63,[0,"3cVbIHf/pFOIs8F1DOqxf1"],13],[56,18,39.028,-64,[0,"57UQ6n88xC8ID7Sr3//sq4"]],-65],4,4,4,1],[1,"87y32dMsxJM5BYgzE6QRaB",null,null,null,1,0],[1,0,39.028,0]],[6,"btnNormal",33554432,1,[-72,-73],[[2,-68,[0,"28ekOeJF9CD4BVTcIHWvDG"],[5,377,128]],[39,3,-69,[0,"0eraiuebJDFqxsHn6iM0L8"],[[40,"9581axEuWZE7KfiJ/iuIUP3","onBtnNormalClick",1]],17],[35,20,214.788,-70,[0,"76l8SNQ0tD/4qDbb+1kh4w"]],[12,-71,[0,"5bM1v7+bJG9Jo337CAMuSf"],18]],[1,"b7o0/d+FBDYaVpo3ufzoAf",null,null,null,1,0],[1,0,-469.212,0]],[6,"btnDouble",33554432,1,[-78,-79],[[2,-74,[0,"cfibCMdklHy7UF0UIK9GQ1"],[5,527,125]],[39,3,-75,[0,"99ShLx9vtATIQQX/d21kHR"],[[40,"9581axEuWZE7KfiJ/iuIUP3","onBtnDoubleClick",1]],21],[18,0,-76,[0,"637H+5K91EprzJ+wHOoPXi"],22],[35,4,374.202,-77,[0,"f75StXBBtOgZzXCfit1JSN"]]],[1,"58x1PuxghKhpBVEofU2Z+1",null,null,null,1,0],[1,0,-311.298,0]],[44,"skin",false,33554432,1,[-83,-84,-85],[[2,-80,[0,"40mJkCdu5P9IbtHmChKadB"],[5,528,140]],[36,17,376.447,301.553,-81,[0,"beYI8q/mZAeqg16YXvymNF"]],[12,-82,[0,"39O9vz6XdJMK4DFbtP4Pgs"],26]],[1,"066CLiR05HwqT+X4UtMi1z",null,null,null,1,0],[1,0,301.553,0]],[45,"content",33554432,3,[-87,-88,-89,-90,-91],[[14,-86,[0,"13aHFv1atE17IFTqI47Yvp"]]],[1,"ddCv6XMktJmooT5KPVs1F2",null,null,null,1,0]],[6,"rewardContent",33554432,1,[-93,-94,-95],[[2,-92,[0,"48Z8stbc5GI4278b6ZzGk1"],[5,62,69]]],[1,"0eA40ITkJI9oyvlqHkuaVr",null,null,null,1,0],[1,0,29.154,335.056]],[6,"people",33554432,2,[-97,-98,-99],[[14,-96,[0,"02HwlyQTNDhIm9LG1wq8ho"]]],[1,"8fq+pGmPhPRJo+DZvxY2bk",null,null,null,1,0],[1,-139,0,0]],[6,"diamond",33554432,2,[-101,-102,-103],[[14,-100,[0,"876+ca9ttJkLiAMcYFOi5y"]]],[1,"ccEB+vVw9Ej5+Ecs8WfDcK",null,null,null,1,0],[1,123,0,0]],[6,"multiple",33554432,2,[-106,-107],[[2,-104,[0,"b7NoHgh7pFKbduvKvL8VG/"],[5,90,54]],[12,-105,[0,"c4dB+2lgdJf5dWbycJVcJ4"],7]],[1,"63K50t3VRODIFBaXotnBmC",null,null,null,1,0],[1,238,64.985,0]],[6,"arrow",33554432,3,[-111],[[16,-108,[0,"24mVHOBGVCz7YTmx/xxwKn"],[5,131,205],[0,0.5,0.25]],[12,-109,[0,"abpmmKlxpHuZMcc2RuzuqK"],10],[59,true,-110,[0,"bfUk649S9CZ52H0GJRY8Zo"],[11],12]],[1,"f0LNJVhFpCuLg2teZ/uKlC",null,null,null,1,0],[1,0,-141.628,0]],[6,"diamond",33554432,4,[-115,-116],[[2,-112,[0,"4dNYpDJehEw5HF4XvDHv31"],[5,130.7275390625,54]],[18,0,-113,[0,"c4nEiAgF1MCZ8zO3hWEKLE"],16],[38,1,1,20,20,5,true,-114,[0,"fbs9JD7iRMF7tYqtlmTuO7"]]],[1,"0ffoIX+SVMV68lQuHn8KMb",null,null,null,1,0],[1,177.894,55.996,0]],[6,"diamond",33554432,5,[-120,-121],[[2,-117,[0,"a9GXqgsahJZ7IIXezTfmcx"],[5,149.63671875,54]],[18,0,-118,[0,"98AaMnQEFFRobHXSjc75Dz"],20],[38,1,1,20,20,5,true,-119,[0,"fbs9JD7iRMF7tYqtlmTuO7"]]],[1,"84fVFHPcZL8Y3jOtBZU8lU",null,null,null,1,0],[1,205.978,52.22,0]],[6,"content",33554432,5,[-124,-125,-126],[[2,-122,[0,"bcxm7wXY9L5Lziv0uJNthh"],[5,314.802734375,70]],[62,1,1,10,true,-123,[0,"54vNVxVW1P6bReunwkLgB3"]]],[1,"a5BItrZqdA0oF/5OASLUgG",null,null,null,1,0],[1,0,5,0]],[6,"keyNode",33554432,1,[-130,-131],[[2,-127,[0,"05nHIUvolHY6ZrW+bRf36y"],[5,128,54]],[57,9,33,83,-128,[0,"c6vfNvjINHjIdizg7N6fOw"]],[12,-129,[0,"05Jqv5paFCzLCOqP3dQ85p"],28]],[1,"e0iewQf3dJfoadbPo2rryO",null,null,null,1,0],[1,-278,638,0]],[6,"winTitle",33554432,1,[-135],[[2,-132,[0,"24BATn5SdJk5N0UR4FW+9d"],[5,614,142]],[12,-133,[0,"05v5XssRZHyqU3NNDKtulj"],1],[36,17,194.467,512.433,-134,[0,"50MjFzvf5E27rJKq1wTuqc"]]],[1,"29s1HQY51BZ71UjtbSoj+Z",null,null,null,1,0],[1,0,482.533,0]],[6,"listNode",33554432,1,[2],[[14,-136,[0,"51xToExGBG9INgDp29NJlJ"]],[58,1,396.447,-137,[0,"f1ZVmbVipOXYserBy40IZL"]]],[1,"df/wAJK5BAEbG7G5UsO/Zh",null,null,null,1,0],[1,0,301.553,0]],[13,["d7AB+KPulPr6Wi1VbaT/EJ"]],[6,"moneyNode",33554432,6,[-140,-141],[[14,-138,[0,"0bP6dwKHdBXKIJRgBxM7lb"]],[63,1,5,-139,[0,"196LTd++FCJo3ymBOyg1YZ"]]],[1,"3fpFBCE4hKCJnunBWw+Lc5",null,null,null,1,0],[1,-194.868,31,0]],[46,"bg",33554432,1,[[2,-142,[0,"f7NISe7HdAD68SLfhnddy8"],[5,750,1496]],[65,0,-143,[0,"e71ctEmpxFC4KlSYRZNz/a"],[4,2516582400],0],[34,45,720,1280,-144,[0,"78TkvAI0hPg7CyIF7Tswi7"]]],[1,"53ftAsFFNGD4XeIdY3e8DY",null,null,null,1,0]],[6,"progressNode",33554432,6,[-147],[[2,-145,[0,"6039xEox9LgpbhR5dpowmr"],[5,460,32]],[12,-146,[0,"00nI6A78RHZ5O+vj2Q5+uI"],25]],[1,"27bN2ndN1IZ7ZHFbhsz0vj",null,null,null,1,0],[1,0,-27.79,0]],[5,"Label",33554432,17,[[[2,-148,[0,"8fdnd03KZGEJiGKgCtgkQP"],[5,168,52.92]],-149],4,1],[1,"47k5qECZlKWZpt9ULAx3lj",null,null,null,1,0],[1,0,24.532,0]],[22,"light",33554432,9,[-151],[[14,-150,[0,"acvC9VA3pD2bxM4cTn3Cgr"]]],[1,"e3yYzFJeJFr6dflAuGjnBo",null,null,null,1,0],[1,0.5,0.5,1]],[23,0,{},24,[24,"d7AB+KPulPr6Wi1VbaT/EJ",null,null,-155,[26,"17DInQnTBNZov1E4PY5ydz",1,[[19,"winLight02",["name"],-152],[15,["position"],-153,[1,0,0,0]],[15,["rotation"],-154,[3,0.7071067811865475,0,0,0.7071067811865476]],[27,true,["playOnLoad"],[13,["4c9xy/feJFW6aHRxanMaso"]]]]],2]],[13,["d7AB+KPulPr6Wi1VbaT/EJ"]],[11,"icon",33554432,9,[[2,-156,[0,"ce6tFTRP9GprstXGl6xzuX"],[5,60,87]],[12,-157,[0,"77leGb+nxKL6cAcdfgFQNU"],3]],[1,"b6WLEmI2VIW67ojFMJJaev",null,null,null,1,0],[1,-25,0,0]],[5,"num",33554432,9,[[[16,-158,[0,"c68UOAlNhN171Umca6yVvF"],[5,48.94140625,55.44],[0,0,0.5]],-159],4,1],[1,"3cfws9FVBCL4philx8Pf6J",null,null,null,1,0],[1,15.464,0,0]],[11,"Node",33554432,2,[[2,-160,[0,"10P3k++MZBhKST2J5dLvIo"],[5,50,100]]],[1,"40+j7H6jBBzafkQ+ZueisK",null,null,null,1,0],[1,-64,0,0]],[5,"add",33554432,2,[[[2,-161,[0,"5etHXmRGlNXbfIMrp/IxER"],[5,62,62]],-162],4,1],[1,"d1aMsMPPJE/ZEb+JXnY4UK",null,null,null,1,0],[1,-8,0,0]],[11,"Node",33554432,2,[[2,-163,[0,"9cYv7qNs1KVLmfNIH5bnLj"],[5,50,100]]],[1,"a1CKK9WNpAULIxkeRT6KYU",null,null,null,1,0],[1,48,0,0]],[22,"light",33554432,10,[-165],[[14,-164,[0,"de76QI3XVAdpeziix46ri8"]]],[1,"30rYtR1XZKgJQoonqHX37I",null,null,null,1,0],[1,0.5,0.5,1]],[23,0,{},32,[24,"d7AB+KPulPr6Wi1VbaT/EJ",null,null,-166,[26,"a2kmHP7U5GYIwLNKQVOpxq",1,[[19,"winLight01",["name"],19],[15,["position"],19,[1,0,10,0]],[15,["rotation"],19,[3,0.7071067811865475,0,0,0.7071067811865476]],[15,["scale"],19,[1,40,40,40]],[27,true,["playOnLoad"],[13,["4c9xy/feJFW6aHRxanMaso"]]],[19,true,["active"],19]]],4]],[11,"icon",33554432,10,[[2,-167,[0,"ddnJgjAYpD8LGkQ3OOaT1S"],[5,63,80]],[18,2,-168,[0,"88m122mdZCs7W+OKgIYI2g"],5]],[1,"5c8ky89vFB3oaxKN+f46dP",null,null,null,1,0],[1,-25,0,0]],[5,"num",33554432,10,[[[16,-169,[0,"5d+UqWctpBGrwP0QTbIRcx"],[5,48.94140625,55.44],[0,0,0.5]],-170],4,1],[1,"d4ajnFzXRJqajQmHM/71tw",null,null,null,1,0],[1,19.107,0,0]],[5,"num",33554432,11,[[[16,-171,[0,"f683iO2H1Oo4UUCUF8z5LY"],[5,73.958984375,47.88],[0,0,0.5]],-172],4,1],[1,"bfb+P53vREVZj+XuUGI1JY",null,null,null,1,0],[1,-34.32,3,0]],[22,"light",33554432,11,[-174],[[14,-173,[0,"b0UBZmhpJI74Jk0plz5nVx"]]],[1,"ccR3hsq39J27Ojra2qCxcW",null,null,null,1,0],[1,0.5,0.5,1]],[23,0,{},37,[24,"d7AB+KPulPr6Wi1VbaT/EJ",null,null,-178,[26,"86PgXuZzRJV6g5eLh7r43u",1,[[19,"winLight03",["name"],-175],[15,["position"],-176,[1,0,0,0]],[15,["rotation"],-177,[3,0.7071067811865475,0,0,0.7071067811865476]],[27,true,["playOnLoad"],[13,["4c9xy/feJFW6aHRxanMaso"]]]]],6]],[13,["d7AB+KPulPr6Wi1VbaT/EJ"]],[11,"item1",33554432,7,[[2,-179,[0,"c68UOAlNhN171Umca6yVvF"],[5,42.267578125,47.88]],[17,"x2",38,38,38,true,-180,[0,"2frm37uaJHQr0AEEaYyM82"]]],[1,"20/ZIrp+ZAorj9F6zoGN51",null,null,null,1,0],[1,-187.982,-71.571,0]],[11,"item2",33554432,7,[[2,-181,[0,"d8YeiDEQVAv4Qf/vYm1tZS"],[5,44.4921875,75.6]],[69,"x3",40,60,true,-182,[0,"a7O5e9kxZJ66ICFG4mDAC2"]]],[1,"7364G+25pAsbTnPGctLkLM",null,null,null,1,0],[1,-113,23,0]],[11,"item3",33554432,7,[[2,-183,[0,"4apOxSDsRHNLu/1P1R6hzk"],[5,42.267578125,47.88]],[17,"x4",38,38,38,true,-184,[0,"dae42QKBdEYoT4GvmXZtva"]]],[1,"4dXCNRnDFAHZXDdDlHg2HN",null,null,null,1,0],[1,0,105.741,0]],[11,"item4",33554432,7,[[2,-185,[0,"e5ztxDtXtEKqKHJGvYn8Hn"],[5,42.267578125,47.88]],[17,"x3",38,38,38,true,-186,[0,"0537Ei3nVNP6uXQRWANNqq"]]],[1,"9cp4dSsU1MlYmRiVDFQHMg",null,null,null,1,0],[1,113,23,0]],[11,"item5",33554432,7,[[2,-187,[0,"835R+AItpFF71tkUnop/4i"],[5,42.267578125,47.88]],[17,"x2",38,38,38,true,-188,[0,"67WcoL2mNJeJJMSctyhVTi"]]],[1,"92K6uMqClENJzlzAr5scjL",null,null,null,1,0],[1,187.982,-71.571,0]],[47,"winImg03",false,33554432,12,[[2,-189,[0,"d8rT3HT8tOdrWyVpcGxs4l"],[5,74,39]],[12,-190,[0,"2ayoPab5FIip9/wpq44lET"],9]],[1,"61c5PIyElCFI49F3WUMqIz",null,null,null,1,0],[1,0,10.014,0]],[5,"txt",33554432,4,[[[2,-191,[0,"c68UOAlNhN171Umca6yVvF"],[5,76,47.88]],-192],4,1],[1,"93V90hEAxEILHwJxXmxrUS",null,null,null,1,0],[1,0,5,0]],[33,"icon",33554432,13,[[2,-193,[0,"f7NISe7HdAD68SLfhnddy8"],[5,29,36]],[18,2,-194,[0,"e71ctEmpxFC4KlSYRZNz/a"],15]],[1,"e0u+StwKJC9JyX1wFjVb9x",null,null,null,1,0],[1,-30.86376953125,0,0],[1,0.9,0.9,1]],[5,"num",33554432,13,[[[16,-195,[0,"c68UOAlNhN171Umca6yVvF"],[5,56.7275390625,42.84],[0,0,0.5]],-196],4,1],[1,"d1C8qvzTZHN5u0G8fC+27N",null,null,null,1,0],[1,-11.36376953125,0,0]],[33,"icon",33554432,14,[[2,-197,[0,"e87J9vJCxJfK29CA3pQAq6"],[5,29,36]],[18,2,-198,[0,"45DSX1HotPPKx3jpoMCivJ"],19]],[1,"89wxl6Y8NLd61ZECfs1Hji",null,null,null,1,0],[1,-40.318359375,0,0],[1,0.9,0.9,1]],[5,"num",33554432,14,[[[16,-199,[0,"49Z2ZlGmlBB63/a7DVM+Fy"],[5,75.63671875,42.84],[0,0,0.5]],-200],4,1],[1,"65Zlax/alA07jBq9YyCKjH",null,null,null,1,0],[1,-20.818359375,0,0]],[5,"icon",33554432,15,[[[2,-201,[0,"f7NISe7HdAD68SLfhnddy8"],[5,54,54]],-202],4,1],[1,"c3if4v5uxAEooCEjuZAPkd",null,null,null,1,0],[1,-130.4013671875,0,0]],[5,"txt",33554432,15,[[[2,-203,[0,"1aqc2Lf/lDjLYjrNezK9em"],[5,143.6689453125,47.88]],-204],4,1],[1,"85nAwH6jBC8afhy4X7AxoM",null,null,null,1,0],[1,-21.56689453125,0,0]],[5,"multiple",33554432,15,[[[2,-205,[0,"eeDxKCBk5J6b6lVplJL5gy"],[5,97.1337890625,47.88]],-206],4,1],[1,"201B+9A2NEQK9YJwcumKAJ",null,null,null,1,0],[1,108.83447265625,0,0]],[23,0,{},8,[24,"16GimssZ5G+p49lC6HmOHY",null,null,-211,[26,"12G7KWAstOvJ3aXtYiZ3t7",1,[[19,true,["playOnLoad"],-207],[67,["defaultClip"],-208,24],[15,["_lpos"],-209,[1,0,62.903,0]],[19,true,["_active"],-210],[68,["_contentSize"],[13,["88x/rmuPRCFJsWtY14BvGf"]],[5,200,200]],[27,1,["_sizeMode"],[13,["aaP6Fe9WFFXINocgRLgQV+"]]]]],23]],[5,"rewardIcon",33554432,8,[[[2,-212,[0,"f7NISe7HdAD68SLfhnddy8"],[5,56,64]],-213],4,1],[1,"4dSQM4rDZNDq8QFHhb9K/k",null,null,null,1,0],[1,0,61.935,0]],[52,"num",false,33554432,8,[[[2,-214,[0,"c68UOAlNhN171Umca6yVvF"],[5,32.81,40]],-215],4,1],[1,"24snpnVOVCLrnrQWIdpbjD",null,null,null,1,0],[1,0,-59.449,0]],[5,"progrss",33554432,6,[[[2,-216,[0,"c68UOAlNhN171Umca6yVvF"],[5,60.0439453125,37.8]],-217],4,1],[1,"33EKDLt+xGzauOfNU4m2Z6",null,null,null,1,0],[1,212.995,31.017,0]],[5,"Sprite",33554432,20,[[[2,-218,[0,"e5qInFGVFLVpnDnC64ub4T"],[5,33,36]],-219],4,1],[1,"afEaGOJXhO3ZcG95h3AWRw",null,null,null,1,0],[1,-33.5,0,0]],[5,"Label",33554432,20,[[[16,-220,[0,"41G1E+eqBC25EfxL1QKe3C"],[5,133.111328125,47.88],[0,0,0.5]],-221],4,1],[1,"501YEuTXdPNox+M0pLbTSE",null,null,null,1,0],[1,-12,0,0]],[53,"Sprite",33554432,22,[[[2,-222,[0,"c71S6CK1RJr7P3okf0y2e5"],[5,460,32]],-223],4,1],[1,"4dGGdR1blI95PiH7FN8WYS",null,null,null,1,0]],[11,"Sprite",33554432,16,[[2,-224,[0,"95S13tOEhKQ5lpW67TEVeD"],[5,71,80]],[12,-225,[0,"d3tXDZvBFCub/iAiYRSkuE"],27]],[1,"1f0Bai3PBFi4dvIXHu7Fnu",null,null,null,1,0],[1,-42.297,0,0]],[5,"Label",33554432,16,[[[2,-226,[0,"c4XdmzpExENZUJ63CizDXd"],[5,37.818359375,42.84]],-227],4,1],[1,"c4kBB+omdNMZJt3uI8Ll/D",null,null,null,1,0],[1,16.617,0,0]],[17,"恭喜获得",42,42,42,true,23,[0,"f8N/Ff23ZPuoH1ZiU5qb7Y"]],[17,"99",44,44,44,true,28,[0,"2frm37uaJHQr0AEEaYyM82"]],[25,30,[0,"ecb8ITYXlAzJvI6In70rst"]],[17,"99",44,44,44,true,35,[0,"05KMG1PJtB4omdi50OV5QX"]],[11,"Node",33554432,2,[[2,-228,[0,"21dD5BggVKSb26koX0/y5P"],[5,20,100]]],[1,"27zS8K8BNKOZVhh6mGA1y4",null,null,null,1,0],[1,183,0,0]],[21,"x5.0",38,38,38,true,36,[0,"36y/NdQ+BK2J2495W6EWxt"],[4,4284824575]],[37,3,[0,"a9Npb8exZBOqCw/8hdsV0/"],[14]],[41,"领取",38,38,38,true,1,46,[0,"2frm37uaJHQr0AEEaYyM82"],[4,4287847702]],[21,"999",34,34,34,true,48,[0,"2frm37uaJHQr0AEEaYyM82"],[4,4290841552]],[21,"9999",34,34,34,true,50,[0,"d4oNvXyDpDDKz6VLVCxGvL"],[4,4290841552]],[25,51,[0,"e71ctEmpxFC4KlSYRZNz/a"]],[41,"Receive",38,38,38,true,1,52,[0,"f3odOjE6pJM6e5l+ay2yWW"],[4,4278996657]],[21,"(X2）",38,38,38,true,53,[0,"59jfBddZtG86zz5gPrMWTN"],[4,4278453503]],[13,["bbX+ait2dMd6WXb01X6TQK"]],[13,["16GimssZ5G+p49lC6HmOHY"]],[25,55,[0,"e71ctEmpxFC4KlSYRZNz/a"]],[70,"30",30,30,false,56,[0,"2frm37uaJHQr0AEEaYyM82"]],[71,"10%",30,30,30,57,[0,"2frm37uaJHQr0AEEaYyM82"],[4,4287223021]],[25,58,[0,"2evFQFPUZNs472CRnB1jJa"]],[72,"R$3000",0,38,38,38,true,59,[0,"36nf7kLLZLZKJ3msu9taql"],[4,4292476926]],[66,3,0,1,60,[0,"49aHnn2CZLirfqY4d9jI4V"]],[21,"20",34,34,34,true,62,[0,"608BwbuXhJPJfJMRMEUiV2"],[4,4284631845]]],0,[0,-1,54,0,-2,38,0,-3,33,0,-4,25,0,6,1,0,0,1,0,0,1,0,13,81,0,14,31,0,15,29,0,16,65,0,17,74,0,18,70,0,19,63,0,20,84,0,21,83,0,22,82,0,23,69,0,24,79,0,25,78,0,26,8,0,27,8,0,28,3,0,29,6,0,30,80,0,31,12,0,32,75,0,33,72,0,34,71,0,35,73,0,36,5,0,37,4,0,38,18,0,39,68,0,40,66,0,41,64,0,42,11,0,43,10,0,44,9,0,0,1,0,0,1,0,0,1,0,-1,21,0,-2,17,0,-3,18,0,-4,3,0,-5,4,0,-6,5,0,-7,8,0,-8,6,0,-9,16,0,0,2,0,0,2,0,0,2,0,-1,9,0,-2,29,0,-3,30,0,-4,31,0,-5,10,0,-6,67,0,-7,11,0,0,3,0,0,3,0,0,3,0,-4,69,0,-1,7,0,-2,12,0,0,4,0,0,4,0,0,4,0,0,4,0,-1,46,0,-2,13,0,0,5,0,0,5,0,0,5,0,0,5,0,-1,14,0,-2,15,0,0,6,0,0,6,0,0,6,0,-1,57,0,-2,20,0,-3,22,0,0,7,0,-1,40,0,-2,41,0,-3,42,0,-4,43,0,-5,44,0,0,8,0,-1,54,0,-2,55,0,-3,56,0,0,9,0,-1,24,0,-2,27,0,-3,28,0,0,10,0,-1,32,0,-2,34,0,-3,35,0,0,11,0,0,11,0,-1,36,0,-2,37,0,0,12,0,0,12,0,0,12,0,-1,45,0,0,13,0,0,13,0,0,13,0,-1,47,0,-2,48,0,0,14,0,0,14,0,0,14,0,-1,49,0,-2,50,0,0,15,0,0,15,0,-1,51,0,-2,52,0,-3,53,0,0,16,0,0,16,0,0,16,0,-1,61,0,-2,62,0,0,17,0,0,17,0,0,17,0,-1,23,0,0,18,0,0,18,0,0,20,0,0,20,0,-1,58,0,-2,59,0,0,21,0,0,21,0,0,21,0,0,22,0,0,22,0,-1,60,0,0,23,0,-2,63,0,0,24,0,-1,25,0,5,26,0,5,26,0,5,26,0,6,25,0,0,27,0,0,27,0,0,28,0,-2,64,0,0,29,0,0,30,0,-2,65,0,0,31,0,0,32,0,-1,33,0,6,33,0,0,34,0,0,34,0,0,35,0,-2,66,0,0,36,0,-2,68,0,0,37,0,-1,38,0,5,39,0,5,39,0,5,39,0,6,38,0,0,40,0,0,40,0,0,41,0,0,41,0,0,42,0,0,42,0,0,43,0,0,43,0,0,44,0,0,44,0,0,45,0,0,45,0,0,46,0,-2,70,0,0,47,0,0,47,0,0,48,0,-2,71,0,0,49,0,0,49,0,0,50,0,-2,72,0,0,51,0,-2,73,0,0,52,0,-2,74,0,0,53,0,-2,75,0,5,76,0,5,76,0,5,77,0,5,77,0,6,54,0,0,55,0,-2,78,0,0,56,0,-2,79,0,0,57,0,-2,80,0,0,58,0,-2,81,0,0,59,0,-2,82,0,0,60,0,-2,83,0,0,61,0,0,61,0,0,62,0,-2,84,0,0,67,0,7,1,2,11,18,228],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,69,73,78,79,81,83],[1,1,10,1,10,1,10,1,1,1,1,-1,3,1,-1,1,1,12,1,1,1,12,1,10,45,1,1,1,1,46,47,-1,3,1,3,1,1,48,1,1],[17,18,19,20,21,22,23,24,7,25,26,8,8,27,4,9,10,11,11,9,10,12,12,28,29,30,7,31,32,33,13,4,4,34,4,35,13,36,37,38]],[[{"name":"game_success_bg4@2x","rect":{"x":0,"y":0,"width":160,"height":54},"offset":{"x":0,"y":0},"originalSize":{"width":160,"height":54},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-80,-27,0,80,-27,0,-80,27,0,80,27,0],"indexes":[0,1,2,2,1,3],"uv":[0,54,160,54,0,0,160,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-80,"y":-27,"z":0},"maxPos":{"x":80,"y":27,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[2],[39]],[[[42,"box",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{"USE_INSTANCING":true,"USE_ALBEDO_MAP":true},{},{}],[[[{"occlusion":-1,"roughness":0.9,"metallic":0.1},"albedoScale",8,[1,0.588235318660736,0.588235318660736,0.588235318660736],"mainTexture",6,0],{},{}],11,0,0]]],0,0,[0,0],[8,9],[40,41]],[[{"name":"game_add_icon@2x","rect":{"x":0,"y":0,"width":62,"height":62},"offset":{"x":0,"y":0},"originalSize":{"width":62,"height":62},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-31,-31,0,31,-31,0,-31,31,0,31,31,0],"indexes":[0,1,2,2,1,3],"uv":[0,62,62,62,0,0,62,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-31,"y":-31,"z":0},"maxPos":{"x":31,"y":31,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[2],[42]],[[{"name":"game_success_banknote_progress_bg2@2x","rect":{"x":0,"y":0,"width":460,"height":32},"offset":{"x":0,"y":0},"originalSize":{"width":460,"height":32},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-230,-16,0,230,-16,0,-230,16,0,230,16,0],"indexes":[0,1,2,2,1,3],"uv":[0,32,460,32,0,0,460,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-230,"y":-16,"z":0},"maxPos":{"x":230,"y":16,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[2],[43]],[[[20,"winLight03"],[29,"winLight03",[[31,"Plane<ModelComponent>",-2,[0,"e0uHCYkZ1D1I9glcT6oLf2"],[0],[3],1],[4,-3,[0,"4c9xy/feJFW6aHRxanMaso"],[2],3]],[1,"d7AB+KPulPr6Wi1VbaT/EJ",null,null,null,-1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,40,40,40],[1,89.99999999999999,0,0]]],0,[0,6,1,0,0,1,0,0,1,0,7,1,3],[0,0,0,0],[-1,4,-1,3],[44,5,3,3]],[[{"name":"game_success_bg1@2x","rect":{"x":0,"y":0,"width":614,"height":142},"offset":{"x":0,"y":0},"originalSize":{"width":614,"height":142},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-307,-71,0,307,-71,0,-307,71,0,307,71,0],"indexes":[0,1,2,2,1,3],"uv":[0,142,614,142,0,0,614,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-307,"y":-71,"z":0},"maxPos":{"x":307,"y":71,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[2],[45]],[[[20,"box01"],[48,"box01",524288,[-2],[1,"4eecO+ZgtLzrZulERvx+kj",null,null,null,-1,0],[1,0,-0.2,-2],[3,0.17364817766693033,0,0,0.984807753012208],[1,20,0,0]],[49,"diamondGroup",524288,[-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15],[1,"d2cHkHNkNG/rjoL+FI6RoH",null,null,null,1,0]],[22,"box",524288,1,[-20,2],[[37,-16,[0,"03Yow77dxI9LLSG9+wBmmX"],[56,57]],[73,true,-17,[0,"b1rPNjWORGdbtfOSl1ufJH"],[1,0,0.4,0],[1,1,0.9,0.7]],[74,4,2,-18,[0,"79Qqs0WWxH/6N0P9Dz2lsE"]],[75,7,-19,[0,"b4OmB0K3hNVrJ575cdQVoP"]]],[1,"44wdrFavVBGLFLc2eonoUv",null,null,null,1,0],[1,0.41,0.41,0.41]],[7,"RootNode",524288,3,[-21,-22],[1,"03cuNQo4tDvbKnpzpv/etu",null,null,null,1,0]],[9,"diamond",524288,2,[-24],[[4,-23,[0,"472iHDALpFipGp1y7qdGuq"],[6],7]],[1,"1eUy7DPP9OVKV1rgyk1buU",null,null,null,1,0],[1,0,0.434,-0.017],[3,-0.6667211085581234,0,0,0.7453072946127839],[1,1.5000000000000002,1.5000000000000002,1.5000000000000002],[1,-83.629,0,0]],[9,"diamond",524288,2,[-26],[[4,-25,[0,"472iHDALpFipGp1y7qdGuq"],[10],11]],[1,"891WfTdVNNRrvpLYpKGarx",null,null,null,1,0],[1,-0.246,0.466,0.129],[3,-0.7308121884374309,-0.1867180392216308,-0.16251842911762243,0.6361113733126165],[1,1.5,1.4999999999999998,1.4999999999999998],[1,-96.96499999999999,-28.433000000000003,3.7929999999999935]],[9,"diamond",524288,2,[-28],[[4,-27,[0,"472iHDALpFipGp1y7qdGuq"],[14],15]],[1,"c5JzJNU/pC5KShSH3TS1GX",null,null,null,1,0],[1,0.071,0.4,-0.041],[3,-0.7308121884374309,-0.1867180392216308,-0.16251842911762243,0.6361113733126165],[1,1.5,1.4999999999999998,1.4999999999999998],[1,-96.96499999999999,-28.433000000000003,3.7929999999999935]],[9,"diamond",524288,2,[-30],[[4,-29,[0,"472iHDALpFipGp1y7qdGuq"],[18],19]],[1,"90ofb/moVPh61XRzxAhVca",null,null,null,1,0],[1,-0.102,0.41,0.034],[3,-0.7488433535525006,-0.09046041628048679,-0.07873519286887871,0.6518061938417785],[1,1.5,1.4999999999999998,1.4999999999999998],[1,-97.701,-13.649,1.882]],[9,"diamond",524288,2,[-32],[[4,-31,[0,"472iHDALpFipGp1y7qdGuq"],[22],23]],[1,"6fNG/s9GVKq7CgEOgkf2VH",null,null,null,1,0],[1,-0.132,0.459,-0.066],[3,-0.6160787578784699,0.419692331978792,0.2198121471873227,0.6292757189960724],[1,1.5,1.4999999999999998,1.4999999999999998],[1,-81.453,55.407,-13.915]],[9,"diamond",524288,2,[-34],[[4,-33,[0,"472iHDALpFipGp1y7qdGuq"],[26],27]],[1,"51De8odDxI5oJNwxjDb5kv",null,null,null,1,0],[1,-0.224,0.449,0.256],[3,-0.7463396886263753,0.125565368189676,0.014175765557298901,0.653459604844355],[1,1.5,1.4999999999999998,1.4999999999999998],[1,-96.668,10.834,-9.724]],[9,"diamond",524288,2,[-36],[[4,-35,[0,"472iHDALpFipGp1y7qdGuq"],[30],31]],[1,"9cZDCMMnFLVrM3XBvNpIdc",null,null,null,1,0],[1,-0.005,0.38,0.246],[3,-0.7463396886263753,0.125565368189676,0.014175765557298901,0.653459604844355],[1,1.5,1.4999999999999998,1.4999999999999998],[1,-96.668,10.834,-9.724]],[9,"diamond",524288,2,[-38],[[4,-37,[0,"472iHDALpFipGp1y7qdGuq"],[34],35]],[1,"faLpq8RVpNZ4gPouzlsmM0",null,null,null,1,0],[1,0.334,0.368,-0.01],[3,-0.5183550618948793,0.2949909760381013,0.44453513509167253,0.6683388867431495],[1,1.5,1.4999999999999998,1.4999999999999998],[1,-85.964,63.266,16.761]],[9,"diamond",524288,2,[-40],[[4,-39,[0,"472iHDALpFipGp1y7qdGuq"],[38],39]],[1,"2eFQmfe5hMFYu3k+mOHPsT",null,null,null,1,0],[1,0.213,0.385,0.098],[3,-0.5934174588626281,0.4166851504814586,0.337870718661252,0.6000604822487434],[1,1.5,1.4999999999999998,1.4999999999999998],[1,-86.12,64.778,-5.109]],[9,"diamond",524288,2,[-42],[[4,-41,[0,"472iHDALpFipGp1y7qdGuq"],[42],43]],[1,"98t1jHBR1AHK37z8+Ogr21",null,null,null,1,0],[1,0.18,0.328,0.237],[3,-0.7062321807010634,0.2826663602582843,0.14790396709644024,0.6320286799170504],[1,1.5,1.4999999999999998,1.4999999999999998],[1,-92.421,35.41,-12.257]],[9,"diamond",524288,2,[-44],[[4,-43,[0,"472iHDALpFipGp1y7qdGuq"],[46],47]],[1,"f1iUlYbnFMjaIvsdCdXx13",null,null,null,1,0],[1,0.338,0.44,0.215],[3,-0.7062321807010634,0.2826663602582843,0.14790396709644024,0.6320286799170504],[1,1.5,1.4999999999999998,1.4999999999999998],[1,-92.421,35.41,-12.257]],[9,"diamond",524288,2,[-46],[[4,-45,[0,"472iHDALpFipGp1y7qdGuq"],[50],51]],[1,"b5eUU9svNOv6iq/98+xYto",null,null,null,1,0],[1,0.349,0.459,-0.012],[3,-0.6856315297610992,0.3294994202739394,0.19005501498080046,0.6206598333364586],[1,1.5,1.4999999999999998,1.4999999999999998],[1,-90.729,43.299,-12.469]],[9,"diamond",524288,2,[-48],[[4,-47,[0,"472iHDALpFipGp1y7qdGuq"],[54],55]],[1,"c1tc2yg5dENp5HYIeF7HP8",null,null,null,1,0],[1,0.005,0.415,0.229],[3,-0.6047315564489912,0.3049388648730526,0.17579672587049128,0.7144281240950203],[1,1.5,1.4999999999999998,1.4999999999999998],[1,-77.981,40.758,-6.755]],[50,"treasureChestNew01",524288,4,[[43,1,-49,[0,"19JicoL9tBd4lxGordwy7s"],[0],[3],1]],[1,"efUD5FIX1DWJfY4CN3NvPX",null,null,null,1,0],[1,1.39844722468752e-8,0.52916431427002,-0.351483941078186],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,1.07362186908722,1.07362186908722,1.07362186908722],[1,-90.00000000000003,0,0]],[8,"treasureChestNew02",524288,4,[[43,1,-50,[0,"05U5R6ya1KVpsHkt79T/Fv"],[2],[3],3]],[1,"50H9yfjmpHNbbnZrM1xd5k",null,null,null,1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,1.07362186908722,1.07362186908722,1.07362186908722],[1,-90.00000000000003,0,0]],[7,"RootNode",524288,5,[-51],[1,"60PbWXfYZLmYQAUSKUas1I",null,null,null,1,0]],[8,"diamond",524288,20,[[10,-52,[0,"ecseUluJtTuIr+ixIxF4R8"],[4],[3],5]],[1,"fexgDmH89JnKQWUOr5KkPp",null,null,null,1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,1.5061981678009,1.5061981678009,1.5061981678009],[1,-90.00000000000003,0,0]],[7,"RootNode",524288,6,[-53],[1,"09q9TKw7BHCK5v2QHMBWc6",null,null,null,1,0]],[8,"diamond",524288,22,[[10,-54,[0,"ecseUluJtTuIr+ixIxF4R8"],[8],[3],9]],[1,"2072H2TNxJSbpRNckghhuX",null,null,null,1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,1.5061981678009,1.5061981678009,1.5061981678009],[1,-90.00000000000003,0,0]],[7,"RootNode",524288,7,[-55],[1,"c07tuW15tCp4RvnnNj9xVb",null,null,null,1,0]],[8,"diamond",524288,24,[[10,-56,[0,"ecseUluJtTuIr+ixIxF4R8"],[12],[3],13]],[1,"c5VfW1pMdKILUSvNKAVoBh",null,null,null,1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,1.5061981678009,1.5061981678009,1.5061981678009],[1,-90.00000000000003,0,0]],[7,"RootNode",524288,8,[-57],[1,"31cIOvoPNATro5o+yslow6",null,null,null,1,0]],[8,"diamond",524288,26,[[10,-58,[0,"ecseUluJtTuIr+ixIxF4R8"],[16],[3],17]],[1,"73SyV97gRM3pJqPtomzHG+",null,null,null,1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,1.5061981678009,1.5061981678009,1.5061981678009],[1,-90.00000000000003,0,0]],[7,"RootNode",524288,9,[-59],[1,"f6qNEJ+LBAdYhJ900/lpRt",null,null,null,1,0]],[8,"diamond",524288,28,[[10,-60,[0,"ecseUluJtTuIr+ixIxF4R8"],[20],[3],21]],[1,"fctcLeZTxE6aN4HvnWJNhl",null,null,null,1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,1.5061981678009,1.5061981678009,1.5061981678009],[1,-90.00000000000003,0,0]],[7,"RootNode",524288,10,[-61],[1,"57seK2sdNIjLJS8NvfhIGV",null,null,null,1,0]],[8,"diamond",524288,30,[[10,-62,[0,"ecseUluJtTuIr+ixIxF4R8"],[24],[3],25]],[1,"dcs8gShfZLUKkT/11kROq8",null,null,null,1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,1.5061981678009,1.5061981678009,1.5061981678009],[1,-90.00000000000003,0,0]],[7,"RootNode",524288,11,[-63],[1,"14PWwZkOdDaIR2HvBObmOm",null,null,null,1,0]],[8,"diamond",524288,32,[[10,-64,[0,"ecseUluJtTuIr+ixIxF4R8"],[28],[3],29]],[1,"2c5AhAC/dJv5dk7kvmB0Q7",null,null,null,1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,1.5061981678009,1.5061981678009,1.5061981678009],[1,-90.00000000000003,0,0]],[7,"RootNode",524288,12,[-65],[1,"a98yldMVhJq7BoCawSCh83",null,null,null,1,0]],[8,"diamond",524288,34,[[10,-66,[0,"ecseUluJtTuIr+ixIxF4R8"],[32],[3],33]],[1,"d7H0VeuKxNULJGafOxVXg/",null,null,null,1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,1.5061981678009,1.5061981678009,1.5061981678009],[1,-90.00000000000003,0,0]],[7,"RootNode",524288,13,[-67],[1,"76RlE42v9BD6qJlB02Vyc7",null,null,null,1,0]],[8,"diamond",524288,36,[[10,-68,[0,"ecseUluJtTuIr+ixIxF4R8"],[36],[3],37]],[1,"492N/dS7hFgrE9yKoDJDxe",null,null,null,1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,1.5061981678009,1.5061981678009,1.5061981678009],[1,-90.00000000000003,0,0]],[7,"RootNode",524288,14,[-69],[1,"00O7nWkfpFg6douHjb56GI",null,null,null,1,0]],[8,"diamond",524288,38,[[10,-70,[0,"ecseUluJtTuIr+ixIxF4R8"],[40],[3],41]],[1,"34lxUS/BJEh57hV5iQzb49",null,null,null,1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,1.5061981678009,1.5061981678009,1.5061981678009],[1,-90.00000000000003,0,0]],[7,"RootNode",524288,15,[-71],[1,"582mwZk01EGbYzSEL1fsh1",null,null,null,1,0]],[8,"diamond",524288,40,[[10,-72,[0,"ecseUluJtTuIr+ixIxF4R8"],[44],[3],45]],[1,"0aotYg2tRKh4RxlUEZyw3Z",null,null,null,1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,1.5061981678009,1.5061981678009,1.5061981678009],[1,-90.00000000000003,0,0]],[7,"RootNode",524288,16,[-73],[1,"b0RHDKvVRDeJL9iJhrwRO8",null,null,null,1,0]],[8,"diamond",524288,42,[[10,-74,[0,"ecseUluJtTuIr+ixIxF4R8"],[48],[3],49]],[1,"59/EpwrLREHpWZxvpRbvNa",null,null,null,1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,1.5061981678009,1.5061981678009,1.5061981678009],[1,-90.00000000000003,0,0]],[7,"RootNode",524288,17,[-75],[1,"18jePvJzpH3ro7ktjL1RFv",null,null,null,1,0]],[8,"diamond",524288,44,[[10,-76,[0,"ecseUluJtTuIr+ixIxF4R8"],[52],[3],53]],[1,"d9bNFLUZ5G56x0arkOa5Z4",null,null,null,1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,1.5061981678009,1.5061981678009,1.5061981678009],[1,-90.00000000000003,0,0]]],0,[0,6,1,0,-1,3,0,-1,5,0,-2,6,0,-3,7,0,-4,8,0,-5,9,0,-6,10,0,-7,11,0,-8,12,0,-9,13,0,-10,14,0,-11,15,0,-12,16,0,-13,17,0,0,3,0,0,3,0,0,3,0,0,3,0,-1,4,0,-1,18,0,-2,19,0,0,5,0,-1,20,0,0,6,0,-1,22,0,0,7,0,-1,24,0,0,8,0,-1,26,0,0,9,0,-1,28,0,0,10,0,-1,30,0,0,11,0,-1,32,0,0,12,0,-1,34,0,0,13,0,-1,36,0,0,14,0,-1,38,0,0,15,0,-1,40,0,0,16,0,-1,42,0,0,17,0,-1,44,0,0,18,0,0,19,0,-1,21,0,0,21,0,-1,23,0,0,23,0,-1,25,0,0,25,0,-1,27,0,0,27,0,-1,29,0,0,29,0,-1,31,0,0,31,0,-1,33,0,0,33,0,-1,35,0,0,35,0,-1,37,0,0,37,0,-1,39,0,0,39,0,-1,41,0,0,41,0,-1,43,0,0,43,0,-1,45,0,0,45,0,7,1,2,11,3,76],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,4,-1,4,-1,4,-1,3,-1,4,-1,3,-1,4,-1,3,-1,4,-1,3,-1,4,-1,3,-1,4,-1,3,-1,4,-1,3,-1,4,-1,3,-1,4,-1,3,-1,4,-1,3,-1,4,-1,3,-1,4,-1,3,-1,4,-1,3,-1,-2],[14,46,14,47,1,2,0,0,1,2,0,0,1,2,0,0,1,2,0,0,1,2,0,0,1,2,0,0,1,2,0,0,1,2,0,0,1,2,0,0,1,2,0,0,1,2,0,0,1,2,0,0,1,2,0,0,48,49]],[[{"name":"game_success_banknote_progress_bg1@2x","rect":{"x":0,"y":0,"width":461,"height":32},"offset":{"x":0,"y":0},"originalSize":{"width":461,"height":32},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-230.5,-16,0,230.5,-16,0,-230.5,16,0,230.5,16,0],"indexes":[0,1,2,2,1,3],"uv":[0,32,461,32,0,0,461,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-230.5,"y":-16,"z":0},"maxPos":{"x":230.5,"y":16,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[2],[50]],[[{"name":"game_success_reward_smell_coin_icon@2x1","rect":{"x":0,"y":0,"width":33,"height":36},"offset":{"x":0,"y":0},"originalSize":{"width":33,"height":36},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-16.5,-18,0,16.5,-18,0,-16.5,18,0,16.5,18,0],"indexes":[0,1,2,2,1,3],"uv":[0,36,33,36,0,0,33,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-16.5,"y":-18,"z":0},"maxPos":{"x":16.5,"y":18,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[2],[51]],[[[76,"commonFont",64,{"commonHeight":72,"fontSize":64,"atlasName":"commonFont.png","fontDefDictionary":{"32":{"xOffset":0,"yOffset":58,"xAdvance":18,"rect":{"x":188,"y":401,"width":0,"height":0}},"33":{"xOffset":6,"yOffset":11,"xAdvance":18,"rect":{"x":53,"y":315,"width":8,"height":47}},"34":{"xOffset":3,"yOffset":10,"xAdvance":23,"rect":{"x":26,"y":401,"width":18,"height":18}},"35":{"xOffset":1,"yOffset":10,"xAdvance":36,"rect":{"x":221,"y":66,"width":36,"height":49}},"36":{"xOffset":2,"yOffset":7,"xAdvance":36,"rect":{"x":203,"y":2,"width":32,"height":58}},"37":{"xOffset":4,"yOffset":10,"xAdvance":57,"rect":{"x":285,"y":2,"width":51,"height":50}},"38":{"xOffset":3,"yOffset":10,"xAdvance":43,"rect":{"x":139,"y":66,"width":40,"height":49}},"39":{"xOffset":3,"yOffset":10,"xAdvance":12,"rect":{"x":46,"y":401,"width":8,"height":18}},"40":{"xOffset":4,"yOffset":9,"xAdvance":21,"rect":{"x":109,"y":2,"width":17,"height":62}},"41":{"xOffset":4,"yOffset":9,"xAdvance":21,"rect":{"x":128,"y":2,"width":17,"height":62}},"42":{"xOffset":2,"yOffset":10,"xAdvance":25,"rect":{"x":2,"y":401,"width":22,"height":21}},"43":{"xOffset":4,"yOffset":19,"xAdvance":37,"rect":{"x":264,"y":364,"width":32,"height":32}},"44":{"xOffset":5,"yOffset":50,"xAdvance":18,"rect":{"x":56,"y":401,"width":8,"height":17}},"45":{"xOffset":2,"yOffset":37,"xAdvance":21,"rect":{"x":126,"y":401,"width":19,"height":7}},"46":{"xOffset":6,"yOffset":50,"xAdvance":18,"rect":{"x":116,"y":401,"width":8,"height":8}},"47":{"xOffset":0,"yOffset":10,"xAdvance":18,"rect":{"x":292,"y":66,"width":19,"height":49}},"48":{"xOffset":3,"yOffset":11,"xAdvance":36,"rect":{"x":246,"y":117,"width":31,"height":48}},"49":{"xOffset":7,"yOffset":10,"xAdvance":36,"rect":{"x":150,"y":167,"width":18,"height":48}},"50":{"xOffset":2,"yOffset":10,"xAdvance":36,"rect":{"x":42,"y":117,"width":32,"height":48}},"51":{"xOffset":3,"yOffset":11,"xAdvance":36,"rect":{"x":76,"y":117,"width":32,"height":48}},"52":{"xOffset":1,"yOffset":11,"xAdvance":36,"rect":{"x":155,"y":266,"width":33,"height":47}},"53":{"xOffset":3,"yOffset":12,"xAdvance":36,"rect":{"x":190,"y":266,"width":32,"height":47}},"54":{"xOffset":2,"yOffset":11,"xAdvance":36,"rect":{"x":110,"y":117,"width":32,"height":48}},"55":{"xOffset":3,"yOffset":11,"xAdvance":36,"rect":{"x":258,"y":266,"width":31,"height":47}},"56":{"xOffset":3,"yOffset":11,"xAdvance":36,"rect":{"x":144,"y":117,"width":32,"height":48}},"57":{"xOffset":3,"yOffset":11,"xAdvance":36,"rect":{"x":178,"y":117,"width":32,"height":48}},"58":{"xOffset":6,"yOffset":23,"xAdvance":18,"rect":{"x":186,"y":364,"width":8,"height":35}},"59":{"xOffset":5,"yOffset":23,"xAdvance":18,"rect":{"x":91,"y":315,"width":8,"height":44}},"60":{"xOffset":4,"yOffset":18,"xAdvance":37,"rect":{"x":196,"y":364,"width":32,"height":33}},"61":{"xOffset":4,"yOffset":24,"xAdvance":37,"rect":{"x":328,"y":364,"width":32,"height":21}},"62":{"xOffset":4,"yOffset":18,"xAdvance":37,"rect":{"x":230,"y":364,"width":32,"height":33}},"63":{"xOffset":3,"yOffset":10,"xAdvance":36,"rect":{"x":279,"y":117,"width":31,"height":48}},"64":{"xOffset":3,"yOffset":9,"xAdvance":65,"rect":{"x":2,"y":2,"width":61,"height":62}},"65":{"xOffset":0,"yOffset":11,"xAdvance":43,"rect":{"x":279,"y":167,"width":44,"height":47}},"66":{"xOffset":5,"yOffset":11,"xAdvance":43,"rect":{"x":41,"y":266,"width":36,"height":47}},"67":{"xOffset":3,"yOffset":10,"xAdvance":46,"rect":{"x":95,"y":66,"width":42,"height":49}},"68":{"xOffset":5,"yOffset":11,"xAdvance":46,"rect":{"x":137,"y":217,"width":39,"height":47}},"69":{"xOffset":5,"yOffset":11,"xAdvance":43,"rect":{"x":79,"y":266,"width":36,"height":47}},"70":{"xOffset":5,"yOffset":11,"xAdvance":39,"rect":{"x":224,"y":266,"width":32,"height":47}},"71":{"xOffset":3,"yOffset":10,"xAdvance":50,"rect":{"x":49,"y":66,"width":44,"height":49}},"72":{"xOffset":5,"yOffset":11,"xAdvance":46,"rect":{"x":2,"y":266,"width":37,"height":47}},"73":{"xOffset":6,"yOffset":11,"xAdvance":18,"rect":{"x":63,"y":315,"width":8,"height":47}},"74":{"xOffset":2,"yOffset":11,"xAdvance":32,"rect":{"x":98,"y":167,"width":27,"height":48}},"75":{"xOffset":5,"yOffset":11,"xAdvance":43,"rect":{"x":178,"y":217,"width":39,"height":47}},"76":{"xOffset":5,"yOffset":11,"xAdvance":36,"rect":{"x":291,"y":266,"width":30,"height":47}},"77":{"xOffset":5,"yOffset":11,"xAdvance":53,"rect":{"x":232,"y":167,"width":45,"height":47}},"78":{"xOffset":5,"yOffset":11,"xAdvance":46,"rect":{"x":219,"y":217,"width":38,"height":47}},"79":{"xOffset":3,"yOffset":10,"xAdvance":50,"rect":{"x":2,"y":66,"width":45,"height":49}},"80":{"xOffset":5,"yOffset":11,"xAdvance":43,"rect":{"x":117,"y":266,"width":36,"height":47}},"81":{"xOffset":3,"yOffset":10,"xAdvance":50,"rect":{"x":237,"y":2,"width":46,"height":52}},"82":{"xOffset":5,"yOffset":11,"xAdvance":46,"rect":{"x":93,"y":217,"width":42,"height":47}},"83":{"xOffset":3,"yOffset":10,"xAdvance":43,"rect":{"x":181,"y":66,"width":38,"height":49}},"84":{"xOffset":2,"yOffset":11,"xAdvance":39,"rect":{"x":259,"y":217,"width":38,"height":47}},"85":{"xOffset":5,"yOffset":11,"xAdvance":46,"rect":{"x":2,"y":117,"width":38,"height":48}},"86":{"xOffset":0,"yOffset":11,"xAdvance":43,"rect":{"x":48,"y":217,"width":43,"height":47}},"87":{"xOffset":1,"yOffset":11,"xAdvance":60,"rect":{"x":170,"y":167,"width":60,"height":47}},"88":{"xOffset":0,"yOffset":11,"xAdvance":43,"rect":{"x":325,"y":167,"width":44,"height":47}},"89":{"xOffset":0,"yOffset":11,"xAdvance":43,"rect":{"x":2,"y":217,"width":44,"height":47}},"90":{"xOffset":1,"yOffset":11,"xAdvance":39,"rect":{"x":299,"y":217,"width":38,"height":47}},"91":{"xOffset":4,"yOffset":11,"xAdvance":18,"rect":{"x":171,"y":2,"width":14,"height":60}},"92":{"xOffset":0,"yOffset":10,"xAdvance":18,"rect":{"x":313,"y":66,"width":19,"height":49}},"93":{"xOffset":1,"yOffset":11,"xAdvance":18,"rect":{"x":187,"y":2,"width":14,"height":60}},"94":{"xOffset":2,"yOffset":9,"xAdvance":30,"rect":{"x":298,"y":364,"width":28,"height":27}},"95":{"xOffset":-1,"yOffset":65,"xAdvance":36,"rect":{"x":147,"y":401,"width":39,"height":6}},"96":{"xOffset":3,"yOffset":11,"xAdvance":21,"rect":{"x":101,"y":401,"width":13,"height":10}},"97":{"xOffset":2,"yOffset":23,"xAdvance":36,"rect":{"x":136,"y":315,"width":32,"height":36}},"98":{"xOffset":4,"yOffset":11,"xAdvance":36,"rect":{"x":312,"y":117,"width":30,"height":48}},"99":{"xOffset":3,"yOffset":23,"xAdvance":32,"rect":{"x":204,"y":315,"width":30,"height":36}},"100":{"xOffset":2,"yOffset":11,"xAdvance":36,"rect":{"x":2,"y":167,"width":30,"height":48}},"101":{"xOffset":2,"yOffset":23,"xAdvance":36,"rect":{"x":170,"y":315,"width":32,"height":36}},"102":{"xOffset":1,"yOffset":10,"xAdvance":18,"rect":{"x":127,"y":167,"width":21,"height":48}},"103":{"xOffset":2,"yOffset":22,"xAdvance":36,"rect":{"x":259,"y":66,"width":31,"height":49}},"104":{"xOffset":4,"yOffset":11,"xAdvance":36,"rect":{"x":323,"y":266,"width":29,"height":47}},"105":{"xOffset":4,"yOffset":11,"xAdvance":14,"rect":{"x":73,"y":315,"width":7,"height":47}},"106":{"xOffset":-3,"yOffset":10,"xAdvance":14,"rect":{"x":155,"y":2,"width":14,"height":61}},"107":{"xOffset":4,"yOffset":11,"xAdvance":32,"rect":{"x":2,"y":315,"width":29,"height":47}},"108":{"xOffset":4,"yOffset":11,"xAdvance":14,"rect":{"x":82,"y":315,"width":7,"height":47}},"109":{"xOffset":4,"yOffset":23,"xAdvance":53,"rect":{"x":316,"y":315,"width":46,"height":35}},"110":{"xOffset":4,"yOffset":23,"xAdvance":36,"rect":{"x":104,"y":364,"width":28,"height":35}},"111":{"xOffset":2,"yOffset":23,"xAdvance":36,"rect":{"x":101,"y":315,"width":33,"height":36}},"112":{"xOffset":4,"yOffset":23,"xAdvance":36,"rect":{"x":34,"y":167,"width":30,"height":48}},"113":{"xOffset":2,"yOffset":23,"xAdvance":36,"rect":{"x":66,"y":167,"width":30,"height":48}},"114":{"xOffset":4,"yOffset":23,"xAdvance":21,"rect":{"x":164,"y":364,"width":20,"height":35}},"115":{"xOffset":2,"yOffset":23,"xAdvance":32,"rect":{"x":236,"y":315,"width":29,"height":36}},"116":{"xOffset":1,"yOffset":11,"xAdvance":18,"rect":{"x":33,"y":315,"width":18,"height":47}},"117":{"xOffset":4,"yOffset":24,"xAdvance":36,"rect":{"x":134,"y":364,"width":28,"height":35}},"118":{"xOffset":1,"yOffset":23,"xAdvance":32,"rect":{"x":37,"y":364,"width":32,"height":35}},"119":{"xOffset":0,"yOffset":23,"xAdvance":46,"rect":{"x":267,"y":315,"width":47,"height":35}},"120":{"xOffset":0,"yOffset":23,"xAdvance":32,"rect":{"x":2,"y":364,"width":33,"height":35}},"121":{"xOffset":1,"yOffset":23,"xAdvance":32,"rect":{"x":212,"y":117,"width":32,"height":48}},"122":{"xOffset":1,"yOffset":23,"xAdvance":32,"rect":{"x":71,"y":364,"width":31,"height":35}},"123":{"xOffset":2,"yOffset":9,"xAdvance":21,"rect":{"x":65,"y":2,"width":20,"height":62}},"124":{"xOffset":6,"yOffset":9,"xAdvance":17,"rect":{"x":147,"y":2,"width":6,"height":62}},"125":{"xOffset":1,"yOffset":9,"xAdvance":21,"rect":{"x":87,"y":2,"width":20,"height":62}},"126":{"xOffset":3,"yOffset":29,"xAdvance":37,"rect":{"x":66,"y":401,"width":33,"height":12}}},"kerningDict":{"2097217":-3,"2097236":-1,"2097241":-1,"3211313":-4,"4259872":-3,"4259924":-4,"4259926":-4,"4259927":-2,"4259929":-4,"4259958":-1,"4259959":-1,"4259961":-1,"4587564":-7,"4587566":-7,"4587585":-3,"4980768":-2,"4980820":-4,"4980822":-4,"4980823":-4,"4980825":-4,"4980857":-2,"5242912":-1,"5242924":-8,"5242926":-8,"5242945":-4,"5374036":-1,"5374038":-1,"5374039":-1,"5374041":-1,"5505056":-1,"5505068":-7,"5505069":-3,"5505070":-7,"5505082":-7,"5505083":-7,"5505089":-4,"5505103":-1,"5505121":-7,"5505123":-7,"5505125":-7,"5505129":-2,"5505135":-7,"5505138":-2,"5505139":-7,"5505141":-2,"5505143":-3,"5505145":-3,"5636140":-5,"5636141":-3,"5636142":-5,"5636154":-2,"5636155":-2,"5636161":-4,"5636193":-4,"5636197":-3,"5636201":-1,"5636207":-3,"5636210":-2,"5636213":-2,"5636217":-2,"5701676":-3,"5701677":-1,"5701678":-3,"5701690":-1,"5701691":-1,"5701697":-2,"5701729":-2,"5701733":-1,"5701743":-1,"5701746":-1,"5701749":-1,"5832736":-1,"5832748":-8,"5832749":-5,"5832750":-8,"5832762":-3,"5832763":-4,"5832769":-4,"5832801":-4,"5832805":-5,"5832809":-2,"5832815":-5,"5832816":-4,"5832817":-5,"5832821":-3,"5832822":-3,"6684774":-1,"7471148":-3,"7471150":-3,"7733292":-4,"7733294":-4,"7798828":-3,"7798830":-3,"7929900":-4,"7929902":-4}}]],0,0,[0],[49],[52]],[[{"name":"game_success_bg2@2x","rect":{"x":0,"y":0,"width":90,"height":54},"offset":{"x":0,"y":0},"originalSize":{"width":90,"height":54},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-45,-27,0,45,-27,0,-45,27,0,45,27,0],"indexes":[0,1,2,2,1,3],"uv":[0,54,90,54,0,0,90,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-45,"y":-27,"z":0},"maxPos":{"x":45,"y":27,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[2],[53]],[[{"name":"game_key_icon@2x","rect":{"x":0,"y":0,"width":71,"height":80},"offset":{"x":0,"y":0},"originalSize":{"width":71,"height":80},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-35.5,-40,0,35.5,-40,0,-35.5,40,0,35.5,40,0],"indexes":[0,1,2,2,1,3],"uv":[0,80,71,80,0,0,71,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-35.5,"y":-40,"z":0},"maxPos":{"x":35.5,"y":40,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[2],[54]],[[[28,".bin",1897037666,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":44400,"length":2280,"count":1140,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":44400,"count":925,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.45258376002311707,-0.3606147766113281,-0.000026016234187409282],"maxPosition",8,[1,0.45258376002311707,0.3606147766113281,0.49749132990837097]]],-1],0,0,[],[],[]],[[[28,".bin",1820385993,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":53472,"length":5088,"count":2544,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":53472,"count":1114,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.46083685755729675,-0.7216102480888367,-0.13403941690921783],"maxPosition",8,[1,0.46083685755729675,0.03633281588554382,0.5273924469947815]]],-1],0,0,[],[],[]],[[{"name":"game_success_reward_diamond_icon@2x","rect":{"x":0,"y":0,"width":29,"height":36},"offset":{"x":0,"y":0},"originalSize":{"width":29,"height":36},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-14.5,-18,0,14.5,-18,0,-14.5,18,0,14.5,18,0],"indexes":[0,1,2,2,1,3],"uv":[0,36,29,36,0,0,29,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-14.5,"y":-18,"z":0},"maxPos":{"x":14.5,"y":18,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[2],[55]],[[{"name":"game_turntable_key_icon@2x","rect":{"x":0,"y":0,"width":56,"height":64},"offset":{"x":0,"y":0},"originalSize":{"width":56,"height":64},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-28,-32,0,28,-32,0,-28,32,0,28,32,0],"indexes":[0,1,2,2,1,3],"uv":[0,64,56,64,0,0,56,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-28,"y":-32,"z":0},"maxPos":{"x":28,"y":32,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[2],[56]],[[[30,"winLight02",1,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[8,9],[57,6]],[[[77,"../res/shader/edgeLight",[{"hash":485132576,"name":"../res/shader/edgeLight|standard-vs:vert|standard-fs:frag","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"tilingOffset2","type":16,"count":1},{"name":"albedo","type":16,"count":1},{"name":"albedoScaleAndCutoff","type":16,"count":1},{"name":"pbrParams","type":16,"count":1},{"name":"miscParams","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScaleParam","type":16,"count":1},{"name":"highlightColor","type":16,"count":1},{"name":"Fresnelcol","type":16,"count":1},{"name":"rampParams","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"albedoMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_ALBEDO_MAP"]},{"name":"normalMap","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_NORMAL_MAP"]},{"name":"pbrMap","type":28,"count":1,"stageFlags":16,"binding":3,"defines":["USE_PBR_MAP"]},{"name":"metallicRoughnessMap","type":28,"count":1,"stageFlags":16,"binding":4,"defines":["USE_METALLIC_ROUGHNESS_MAP"]},{"name":"occlusionMap","type":28,"count":1,"stageFlags":16,"binding":5,"defines":["USE_OCCLUSION_MAP"]},{"name":"emissiveMap","type":28,"count":1,"stageFlags":16,"binding":6,"defines":["USE_EMISSIVE_MAP"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":6,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":7,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING","CC_USE_LIGHTMAP"]},{"name":"a_localShadowBiasAndProbeId","format":44,"isInstanced":true,"location":11,"defines":["USE_INSTANCING"]},{"name":"a_reflectionProbeData","format":44,"isInstanced":true,"location":12,"defines":["USE_INSTANCING","CC_USE_REFLECTION_PROBE"]},{"name":"a_sh_linear_const_r","format":44,"isInstanced":true,"location":13,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_sh_linear_const_g","format":44,"isInstanced":true,"location":14,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_sh_linear_const_b","format":44,"isInstanced":true,"location":15,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_vertexId","format":11,"location":16,"defines":["CC_USE_MORPH"]},{"name":"a_color","format":44,"location":17,"defines":["USE_VERTEX_COLOR"]},{"name":"a_texCoord1","format":21,"location":18,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"descriptors":[{"rate":0,"blocks":[{"name":"CCMorph","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_displacementWeights","typename":"vec4","type":16,"count":15,"isArray":true},{"name":"cc_displacementTextureInfo","typename":"vec4","type":16,"count":1}],"defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_jointTextureInfo","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_jointAnimInfo","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_joints","typename":"vec4","type":16,"count":0,"precision":"highp ","isArray":true}],"defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","!CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"CCLocal","stageFlags":17,"tags":{"builtin":"local"},"members":[{"name":"cc_matWorld","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matWorldIT","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_lightingMapUVParam","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_localShadowBias","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData2","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeBlendData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeBlendData2","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["!USE_INSTANCING"]},{"name":"CCSH","stageFlags":16,"tags":{"builtin":"local"},"members":[{"name":"cc_sh_linear_const_r","typename":"vec4","type":16,"count":1},{"name":"cc_sh_linear_const_g","typename":"vec4","type":16,"count":1},{"name":"cc_sh_linear_const_b","typename":"vec4","type":16,"count":1},{"name":"cc_sh_quadratic_r","typename":"vec4","type":16,"count":1},{"name":"cc_sh_quadratic_g","typename":"vec4","type":16,"count":1},{"name":"cc_sh_quadratic_b","typename":"vec4","type":16,"count":1},{"name":"cc_sh_quadratic_a","typename":"vec4","type":16,"count":1}],"defines":["CC_USE_LIGHT_PROBE","!USE_INSTANCING"]},{"name":"CCForwardLight","stageFlags":16,"tags":{"builtin":"local"},"members":[{"name":"cc_lightPos","typename":"vec4","type":16,"count":0,"precision":"highp ","isArray":true},{"name":"cc_lightColor","typename":"vec4","type":16,"count":0,"isArray":true},{"name":"cc_lightSizeRangeAngle","typename":"vec4","type":16,"count":0,"isArray":true},{"name":"cc_lightDir","typename":"vec4","type":16,"count":0,"isArray":true},{"name":"cc_lightBoundingSizeVS","typename":"vec4","type":16,"count":0,"isArray":true}],"defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","typename":"sampler2D","type":28,"count":1,"stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","typename":"sampler2D","type":28,"count":1,"stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","typename":"sampler2D","type":28,"count":1,"stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","typename":"sampler2D","type":28,"count":1,"precision":"highp ","stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_realtimeJoint","typename":"sampler2D","type":28,"count":1,"precision":"highp ","stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"cc_reflectionProbeCubemap","typename":"samplerCube","type":31,"count":1,"stageFlags":16,"tags":{"builtin":"local"},"defines":["CC_USE_REFLECTION_PROBE"]},{"name":"cc_reflectionProbePlanarMap","typename":"sampler2D","type":28,"count":1,"stageFlags":16,"tags":{"builtin":"local"},"defines":["CC_USE_REFLECTION_PROBE"]},{"name":"cc_reflectionProbeDataMap","typename":"sampler2D","type":28,"count":1,"stageFlags":16,"tags":{"builtin":"local"},"defines":["CC_USE_REFLECTION_PROBE"]},{"name":"cc_reflectionProbeBlendCubemap","typename":"samplerCube","type":31,"count":1,"stageFlags":16,"tags":{"builtin":"local"},"defines":["CC_USE_REFLECTION_PROBE"]},{"name":"cc_lightingMap","typename":"sampler2D","type":28,"count":1,"stageFlags":16,"tags":{"builtin":"local"},"defines":["CC_USE_LIGHTMAP","!CC_FORWARD_ADD"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":1,"blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"tilingOffset2","type":16,"count":1},{"name":"albedo","type":16,"count":1},{"name":"albedoScaleAndCutoff","type":16,"count":1},{"name":"pbrParams","type":16,"count":1},{"name":"miscParams","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScaleParam","type":16,"count":1},{"name":"highlightColor","type":16,"count":1},{"name":"Fresnelcol","type":16,"count":1},{"name":"rampParams","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"albedoMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_ALBEDO_MAP"]},{"name":"normalMap","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_NORMAL_MAP"]},{"name":"pbrMap","type":28,"count":1,"stageFlags":16,"binding":3,"defines":["USE_PBR_MAP"]},{"name":"metallicRoughnessMap","type":28,"count":1,"stageFlags":16,"binding":4,"defines":["USE_METALLIC_ROUGHNESS_MAP"]},{"name":"occlusionMap","type":28,"count":1,"stageFlags":16,"binding":5,"defines":["USE_OCCLUSION_MAP"]},{"name":"emissiveMap","type":28,"count":1,"stageFlags":16,"binding":6,"defines":["USE_EMISSIVE_MAP"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":2,"blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":3,"blocks":[{"name":"CCGlobal","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_time","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_screenSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nativeSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_probeInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_debug_view_mode","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCamera","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_matView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_cameraPos","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_surfaceTransform","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_screenScale","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_exposure","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitDir","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientSky","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientGround","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogBase","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogAdd","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nearFar","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_viewPort","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCShadow","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_matLightView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matLightViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_shadowInvProjDepthInfo","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_shadowProjDepthInfo","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_shadowProjInfo","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_shadowNFLSInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_shadowWHPBInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_shadowLPNNInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_shadowColor","typename":"vec4","type":16,"count":1,"precision":"lowp "},{"name":"cc_planarNDInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCSM","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_csmViewDir0","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmViewDir1","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmViewDir2","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmAtlas","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_matCSMViewProj","typename":"mat4","type":25,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmProjDepthInfo","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmProjInfo","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmSplitsInfo","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["CC_SUPPORT_CASCADED_SHADOW_MAP"]}],"samplerTextures":[{"name":"cc_shadowMap","typename":"sampler2D","type":28,"count":1,"precision":"highp ","stageFlags":17,"tags":{"builtin":"global"},"defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotShadowMap","typename":"sampler2D","type":28,"count":1,"precision":"highp ","stageFlags":17,"tags":{"builtin":"global"},"defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_environment","typename":"samplerCube","type":31,"count":1,"stageFlags":16,"tags":{"builtin":"global"},"defines":[]},{"name":"cc_diffuseMap","typename":"samplerCube","type":31,"count":1,"stageFlags":16,"tags":{"builtin":"global"},"defines":["CC_USE_IBL","CC_USE_DIFFUSEMAP"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]}],"glsl4":{"vert":"#extension GL_EXT_shader_explicit_arithmetic_types_int32: require\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define LIGHT_MAP_TYPE_DISABLED 0\n#define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n#define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n#define REFLECTION_PROBE_TYPE_NONE 0\n#define REFLECTION_PROBE_TYPE_CUBE 1\n#define REFLECTION_PROBE_TYPE_PLANAR 2\n#define REFLECTION_PROBE_TYPE_BLEND 3\n#define REFLECTION_PROBE_TYPE_BLEND_AND_SKYBOX 4\n#define LIGHT_TYPE_DIRECTIONAL 0.0\n#define LIGHT_TYPE_SPHERE 1.0\n#define LIGHT_TYPE_SPOT 2.0\n#define LIGHT_TYPE_POINT 3.0\n#define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n#define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n#define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n#define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n#define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n#define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n#define TONE_MAPPING_ACES 0\n#define TONE_MAPPING_LINEAR 1\n#define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\n#ifndef CC_SURFACES_DEBUG_VIEW_SINGLE\n  #define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#endif\n#ifndef CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n  #define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n#endif\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_SKINNING\n    layout(location = 4) in u32vec4 a_joints;\n  layout(location = 5) in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    layout(location = 6) in highp vec4 a_jointAnimInfo;\n  #endif\n  layout(location = 7) in vec4 a_matWorld0;\n  layout(location = 8) in vec4 a_matWorld1;\n  layout(location = 9) in vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    layout(location = 10) in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_USE_REFLECTION_PROBE || CC_RECEIVE_SHADOW\n    #if CC_RECEIVE_SHADOW\n    #endif\n    layout(location = 11) in vec4 a_localShadowBiasAndProbeId;\n  #endif\n  #if CC_USE_REFLECTION_PROBE\n    layout(location = 12) in vec4 a_reflectionProbeData;\n  #endif\n  #if CC_USE_LIGHT_PROBE\n    layout(location = 13) in vec4 a_sh_linear_const_r;\n    layout(location = 14) in vec4 a_sh_linear_const_g;\n    layout(location = 15) in vec4 a_sh_linear_const_b;\n  #endif\n#endif\n#if CC_USE_MORPH\n    int getVertexId() {\n      return gl_VertexIndex;\n    }\n#endif\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\n#if CC_USE_MORPH\n  layout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  #if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 8) uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 9) uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 10) uniform sampler2D cc_TangentDisplacements;\n  #endif\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(set = 2, binding = 3) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    layout(set = 2, binding = 7) uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      layout(set = 2, binding = 7) uniform highp sampler2D cc_realtimeJoint;\n    #else\n      layout(set = 2, binding = 3) uniform CCSkinning {\n        highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n      };\n    #endif\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          float x = i;\n          vec4 v1 = texture(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n          vec4 v2 = texture(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n          vec4 v3 = texture(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n         float x = 4.0 * i;\n          vec4 v1 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      mat4 getJointMatrix (float i) {\n        int idx = int(i);\n        vec4 v1 = cc_joints[idx * 3];\n        vec4 v2 = cc_joints[idx * 3 + 1];\n        vec4 v3 = cc_joints[idx * 3 + 2];\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if !USE_INSTANCING\n  layout(set = 2, binding = 0) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n    highp vec4 cc_localShadowBias;\n    highp vec4 cc_reflectionProbeData1;\n    highp vec4 cc_reflectionProbeData2;\n    highp vec4 cc_reflectionProbeBlendData1;\n    highp vec4 cc_reflectionProbeBlendData2;\n  };\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    vec3 scale = 1.0 / vec3(length(a_matWorld0.xyz), length(a_matWorld1.xyz), length(a_matWorld2.xyz));\n    vec3 scale2 = scale * scale;\n    matWorldIT = mat4(\n      vec4(a_matWorld0.xyz * scale2.x, 0.0),\n      vec4(a_matWorld1.xyz * scale2.y, 0.0),\n      vec4(a_matWorld2.xyz * scale2.z, 0.0),\n      vec4(0.0, 0.0, 0.0, 1.0)\n    );\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 tilingOffset2;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 miscParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n  vec4 highlightColor;\n  vec4 Fresnelcol;\n  vec4 rampParams;\n};\n#if CC_USE_FOG != 4\n  float LinearFog(vec4 pos, vec3 cameraPos, float fogStart, float fogEnd) {\n      vec4 wPos = pos;\n      float cam_dis = distance(cameraPos, wPos.xyz);\n      return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n  }\n  float ExpFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * fogDensity);\n      return f;\n  }\n  float ExpSquaredFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n      return f;\n  }\n  float LayeredFog(vec4 pos, vec3 cameraPos, float fogTop, float fogRange, float fogAtten) {\n      vec4 wPos = pos;\n      vec3 camWorldProj = cameraPos.xyz;\n      camWorldProj.y = 0.;\n      vec3 worldPosProj = wPos.xyz;\n      worldPosProj.y = 0.;\n      float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n      float fDeltaY, fDensityIntegral;\n      if (cameraPos.y > fogTop) {\n          if (wPos.y < fogTop) {\n              fDeltaY = (fogTop - wPos.y) / fogRange * 2.0;\n              fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n          }\n          else {\n              fDeltaY = 0.;\n              fDensityIntegral = 0.;\n          }\n      }\n      else {\n          if (wPos.y < fogTop) {\n              float fDeltaA = (fogTop - cameraPos.y) / fogRange * 2.;\n              float fDeltaB = (fogTop - wPos.y) / fogRange * 2.;\n              fDeltaY = abs(fDeltaA - fDeltaB);\n              fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n          }\n          else {\n              fDeltaY = abs(fogTop - cameraPos.y) / fogRange * 2.;\n              fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n          }\n      }\n      float fDensity;\n      if (fDeltaY != 0.) {\n          fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n      }\n      else {\n          fDensity = 0.;\n      }\n      float f = exp(-fDensity);\n      return f;\n  }\n#endif\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n#if CC_USE_FOG == 0\n\tfactor = LinearFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.y);\n#elif CC_USE_FOG == 1\n\tfactor = ExpFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 2\n\tfactor = ExpSquaredFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 3\n\tfactor = LayeredFog(pos, cc_cameraPos.xyz, cc_fogAdd.x, cc_fogAdd.y, cc_fogAdd.z);\n#else\n\tfactor = 1.0;\n#endif\n}\n#if !CC_USE_ACCURATE_FOG\nlayout(location = 0) out mediump float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\nlayout(location = 1) out highp vec4 v_shadowPos;\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  layout(set = 0, binding = 3) uniform CCCSM {\n    highp vec4 cc_csmViewDir0[4];\n    highp vec4 cc_csmViewDir1[4];\n    highp vec4 cc_csmViewDir2[4];\n    highp vec4 cc_csmAtlas[4];\n    highp mat4 cc_matCSMViewProj[4];\n    highp vec4 cc_csmProjDepthInfo[4];\n    highp vec4 cc_csmProjInfo[4];\n    highp vec4 cc_csmSplitsInfo;\n  };\n#endif\n#ifdef CC_USE_METAL\n#define CC_HANDLE_SAMPLE_NDC_FLIP_STATIC(y) y = -y\n#else\n#define CC_HANDLE_SAMPLE_NDC_FLIP_STATIC(y)\n#endif\n#if CC_RECEIVE_SHADOW\n  layout(set = 0, binding = 4) uniform highp sampler2D cc_shadowMap;\n  layout(set = 0, binding = 6) uniform highp sampler2D cc_spotShadowMap;\n    #define UnpackBitFromFloat(value, bit) (mod(floor(value / pow(10.0, float(bit))), 10.0) > 0.0)\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #else\n  #endif\n#endif\n#if CC_RECEIVE_SHADOW\n#endif\n#if USE_VERTEX_COLOR\n  layout(location = 17) in vec4 a_color;\n  layout(location = 2) out vec4 v_color;\n#endif\nlayout(location = 3) out vec3 v_position;\nlayout(location = 4) out vec3 v_position_local;\nlayout(location = 5) out vec4 matWorldIT_R0;\nlayout(location = 6) out vec4 matWorldIT_R1;\nlayout(location = 7) out vec4 matWorldIT_R2;\nlayout(location = 8) out vec4 matWorldIT_R3;\nlayout(location = 9) out vec3 v_normal;\nlayout(location = 10) out vec2 v_uv;\nlayout(location = 11) out vec2 v_uv1;\n#if USE_NORMAL_MAP\n  layout(location = 12) out vec3 v_tangent;\n  layout(location = 13) out vec3 v_bitangent;\n#endif\n#if HAS_SECOND_UV || CC_USE_LIGHTMAP\n  layout(location = 18) in vec2 a_texCoord1;\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  layout(location = 14) out vec3 v_luv;\n  void CCLightingMapCaclUV()\n  {\n  #if !USE_INSTANCING\n    v_luv.xy = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.z;\n    v_luv.z = cc_lightingMapUVParam.w;\n  #else\n    v_luv.xy = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.z;\n    v_luv.z = a_lightingMapUVParam.w;\n  #endif\n  }\n#endif\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  matWorldIT_R0 = matWorldIT[0];\n  matWorldIT_R1 = matWorldIT[1];\n  matWorldIT_R2 = matWorldIT[2];\n  matWorldIT_R3 = matWorldIT[3];\n  vec4 pos = matWorld * In.position;\n  v_position_local = In.position.xyz;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if USE_NORMAL_MAP\n    v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  #endif\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if SAMPLE_FROM_RT\n    v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n  #endif\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord * tilingOffset2.xy + tilingOffset2.zw;\n    #if SAMPLE_FROM_RT\n      v_uv1 = cc_cameraPos.w > 1.0 ? vec2(v_uv1.x, 1.0 - v_uv1.y) : v_uv1;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(pos);\n  v_shadowPos = cc_matLightViewProj * pos;\n  #if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n    CCLightingMapCaclUV();\n  #endif\n  return cc_matProj * (cc_matView * matWorld) * In.position;\n  }\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define LIGHT_MAP_TYPE_DISABLED 0\n#define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n#define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n#define REFLECTION_PROBE_TYPE_NONE 0\n#define REFLECTION_PROBE_TYPE_CUBE 1\n#define REFLECTION_PROBE_TYPE_PLANAR 2\n#define REFLECTION_PROBE_TYPE_BLEND 3\n#define REFLECTION_PROBE_TYPE_BLEND_AND_SKYBOX 4\n#define LIGHT_TYPE_DIRECTIONAL 0.0\n#define LIGHT_TYPE_SPHERE 1.0\n#define LIGHT_TYPE_SPOT 2.0\n#define LIGHT_TYPE_POINT 3.0\n#define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n#define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n#define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n#define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n#define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n#define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n#define TONE_MAPPING_ACES 0\n#define TONE_MAPPING_LINEAR 1\n#define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\n#ifndef CC_SURFACES_DEBUG_VIEW_SINGLE\n  #define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#endif\n#ifndef CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n  #define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n#endif\nvec3 SRGBToLinear (vec3 gamma) {\n#ifdef CC_USE_SURFACE_SHADER\n  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC && CC_SURFACES_ENABLE_DEBUG_VIEW\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION) {\n      return gamma;\n    }\n  #endif\n#endif\n  return gamma * gamma;\n}\nvec3 LinearToSRGB(vec3 linear) {\n#ifdef CC_USE_SURFACE_SHADER\n  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC && CC_SURFACES_ENABLE_DEBUG_VIEW\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION) {\n      return linear;\n    }\n  #endif\n#endif\n  return sqrt(linear);\n}\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  layout(set = 0, binding = 3) uniform CCCSM {\n    highp vec4 cc_csmViewDir0[4];\n    highp vec4 cc_csmViewDir1[4];\n    highp vec4 cc_csmViewDir2[4];\n    highp vec4 cc_csmAtlas[4];\n    highp mat4 cc_matCSMViewProj[4];\n    highp vec4 cc_csmProjDepthInfo[4];\n    highp vec4 cc_csmProjInfo[4];\n    highp vec4 cc_csmSplitsInfo;\n  };\n#endif\n#ifdef CC_USE_METAL\n#define CC_HANDLE_SAMPLE_NDC_FLIP_STATIC(y) y = -y\n#else\n#define CC_HANDLE_SAMPLE_NDC_FLIP_STATIC(y)\n#endif\nvec2 GetPlanarReflectScreenUV(vec3 worldPos, mat4 matVirtualCameraViewProj, float flipNDCSign, vec3 viewDir, vec3 reflectDir)\n{\n  vec4 clipPos = matVirtualCameraViewProj * vec4(worldPos, 1.0);\n  vec2 screenUV = clipPos.xy / clipPos.w * 0.5 + 0.5;\n  screenUV = vec2(1.0 - screenUV.x, screenUV.y);\n  screenUV = flipNDCSign == 1.0 ? vec2(screenUV.x, 1.0 - screenUV.y) : screenUV;\n  return screenUV;\n}\nvec3 RotationVecFromAxisY(vec3 v, float cosTheta, float sinTheta)\n{\n    vec3 result;\n    result.x = dot(v, vec3(cosTheta, 0.0, -sinTheta));\n    result.y = v.y;\n    result.z = dot(v, vec3(sinTheta, 0.0,  cosTheta));\n    return result;\n}\nvec3 RotationVecFromAxisY(vec3 v, float rotateAngleArc)\n{\n  return RotationVecFromAxisY(v, cos(rotateAngleArc), sin(rotateAngleArc));\n}\n#if CC_RECEIVE_SHADOW\n  layout(set = 0, binding = 4) uniform highp sampler2D cc_shadowMap;\n  layout(set = 0, binding = 6) uniform highp sampler2D cc_spotShadowMap;\n    #define UnpackBitFromFloat(value, bit) (mod(floor(value / pow(10.0, float(bit))), 10.0) > 0.0)\n    highp float unpackHighpData (float mainPart, float modPart) {\n      highp float data = mainPart;\n      return data + modPart;\n    }\n    highp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n      highp float data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    highp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n      highp vec2 data = mainPart;\n      return data + modPart;\n    }\n    highp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n      highp vec2 data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    highp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n      highp vec3 data = mainPart;\n      return data + modPart;\n    }\n    highp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n      highp vec3 data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    highp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n      highp vec4 data = mainPart;\n      return data + modPart;\n    }\n    highp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n      highp vec4 data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n  float NativePCFShadowFactorHard (vec3 shadowNDCPos, highp sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    #if CC_SHADOWMAP_FORMAT == 1\n      return step(shadowNDCPos.z, dot(texture(shadowMap, shadowNDCPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      return step(shadowNDCPos.z, texture(shadowMap, shadowNDCPos.xy).x);\n    #endif\n  }\n  float NativePCFShadowFactorSoft (vec3 shadowNDCPos, highp sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    vec2 oneTap = 1.0 / shadowMapResolution;\n    vec2 shadowNDCPos_offset = shadowNDCPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    #if CC_SHADOWMAP_FORMAT == 1\n      block0 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      block0 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)).x);\n      block1 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos.y)).x);\n      block2 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset.y)).x);\n      block3 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos_offset.y)).x);\n    #endif\n    float coefX   = mod(shadowNDCPos.x, oneTap.x) * shadowMapResolution.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(shadowNDCPos.y, oneTap.y) * shadowMapResolution.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float NativePCFShadowFactorSoft3X (vec3 shadowNDCPos, highp sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    vec2 oneTap = 1.0 / shadowMapResolution;\n    float shadowNDCPos_offset_L = shadowNDCPos.x - oneTap.x;\n    float shadowNDCPos_offset_R = shadowNDCPos.x + oneTap.x;\n    float shadowNDCPos_offset_U = shadowNDCPos.y - oneTap.y;\n    float shadowNDCPos_offset_D = shadowNDCPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    #if CC_SHADOWMAP_FORMAT == 1\n      block0 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      block0 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_U)).x);\n      block1 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_U)).x);\n      block2 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_U)).x);\n      block3 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos.y)).x);\n      block4 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)).x);\n      block5 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos.y)).x);\n      block6 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_D)).x);\n      block7 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_D)).x);\n      block8 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_D)).x);\n    #endif\n    float coefX = mod(shadowNDCPos.x, oneTap.x) * shadowMapResolution.x;\n    float coefY = mod(shadowNDCPos.y, oneTap.y) * shadowMapResolution.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n  float NativePCFShadowFactorSoft5X (vec3 shadowNDCPos, highp sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    vec2 oneTap = 1.0 / shadowMapResolution;\n    vec2 twoTap = oneTap * 2.0;\n    vec2 offset1 = shadowNDCPos.xy + vec2(-twoTap.x, -twoTap.y);\n    vec2 offset2 = shadowNDCPos.xy + vec2(-oneTap.x, -twoTap.y);\n    vec2 offset3 = shadowNDCPos.xy + vec2(0.0, -twoTap.y);\n    vec2 offset4 = shadowNDCPos.xy + vec2(oneTap.x, -twoTap.y);\n    vec2 offset5 = shadowNDCPos.xy + vec2(twoTap.x, -twoTap.y);\n    vec2 offset6 = shadowNDCPos.xy + vec2(-twoTap.x, -oneTap.y);\n    vec2 offset7 = shadowNDCPos.xy + vec2(-oneTap.x, -oneTap.y);\n    vec2 offset8 = shadowNDCPos.xy + vec2(0.0, -oneTap.y);\n    vec2 offset9 = shadowNDCPos.xy + vec2(oneTap.x, -oneTap.y);\n    vec2 offset10 = shadowNDCPos.xy + vec2(twoTap.x, -oneTap.y);\n    vec2 offset11 = shadowNDCPos.xy + vec2(-twoTap.x, 0.0);\n    vec2 offset12 = shadowNDCPos.xy + vec2(-oneTap.x, 0.0);\n    vec2 offset13 = shadowNDCPos.xy + vec2(0.0, 0.0);\n    vec2 offset14 = shadowNDCPos.xy + vec2(oneTap.x, 0.0);\n    vec2 offset15 = shadowNDCPos.xy + vec2(twoTap.x, 0.0);\n    vec2 offset16 = shadowNDCPos.xy + vec2(-twoTap.x, oneTap.y);\n    vec2 offset17 = shadowNDCPos.xy + vec2(-oneTap.x, oneTap.y);\n    vec2 offset18 = shadowNDCPos.xy + vec2(0.0, oneTap.y);\n    vec2 offset19 = shadowNDCPos.xy + vec2(oneTap.x, oneTap.y);\n    vec2 offset20 = shadowNDCPos.xy + vec2(twoTap.x, oneTap.y);\n    vec2 offset21 = shadowNDCPos.xy + vec2(-twoTap.x, twoTap.y);\n    vec2 offset22 = shadowNDCPos.xy + vec2(-oneTap.x, twoTap.y);\n    vec2 offset23 = shadowNDCPos.xy + vec2(0.0, twoTap.y);\n    vec2 offset24 = shadowNDCPos.xy + vec2(oneTap.x, twoTap.y);\n    vec2 offset25 = shadowNDCPos.xy + vec2(twoTap.x, twoTap.y);\n    float block1, block2, block3, block4, block5, block6, block7, block8, block9, block10, block11, block12, block13, block14, block15, block16, block17, block18, block19, block20, block21, block22, block23, block24, block25;\n    #if CC_SHADOWMAP_FORMAT == 1\n      block1 = step(shadowNDCPos.z, dot(texture(shadowMap, offset1), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(shadowNDCPos.z, dot(texture(shadowMap, offset2), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(shadowNDCPos.z, dot(texture(shadowMap, offset3), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(shadowNDCPos.z, dot(texture(shadowMap, offset4), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(shadowNDCPos.z, dot(texture(shadowMap, offset5), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(shadowNDCPos.z, dot(texture(shadowMap, offset6), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(shadowNDCPos.z, dot(texture(shadowMap, offset7), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(shadowNDCPos.z, dot(texture(shadowMap, offset8), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block9 = step(shadowNDCPos.z, dot(texture(shadowMap, offset9), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block10 = step(shadowNDCPos.z, dot(texture(shadowMap, offset10), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block11 = step(shadowNDCPos.z, dot(texture(shadowMap, offset11), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block12 = step(shadowNDCPos.z, dot(texture(shadowMap, offset12), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block13 = step(shadowNDCPos.z, dot(texture(shadowMap, offset13), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block14 = step(shadowNDCPos.z, dot(texture(shadowMap, offset14), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block15 = step(shadowNDCPos.z, dot(texture(shadowMap, offset15), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block16 = step(shadowNDCPos.z, dot(texture(shadowMap, offset16), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block17 = step(shadowNDCPos.z, dot(texture(shadowMap, offset17), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block18 = step(shadowNDCPos.z, dot(texture(shadowMap, offset18), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block19 = step(shadowNDCPos.z, dot(texture(shadowMap, offset19), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block20 = step(shadowNDCPos.z, dot(texture(shadowMap, offset20), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block21 = step(shadowNDCPos.z, dot(texture(shadowMap, offset21), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block22 = step(shadowNDCPos.z, dot(texture(shadowMap, offset22), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block23 = step(shadowNDCPos.z, dot(texture(shadowMap, offset23), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block24 = step(shadowNDCPos.z, dot(texture(shadowMap, offset24), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block25 = step(shadowNDCPos.z, dot(texture(shadowMap, offset25), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      block1 = step(shadowNDCPos.z, texture(shadowMap, offset1).x);\n      block2 = step(shadowNDCPos.z, texture(shadowMap, offset2).x);\n      block3 = step(shadowNDCPos.z, texture(shadowMap, offset3).x);\n      block4 = step(shadowNDCPos.z, texture(shadowMap, offset4).x);\n      block5 = step(shadowNDCPos.z, texture(shadowMap, offset5).x);\n      block6 = step(shadowNDCPos.z, texture(shadowMap, offset6).x);\n      block7 = step(shadowNDCPos.z, texture(shadowMap, offset7).x);\n      block8 = step(shadowNDCPos.z, texture(shadowMap, offset8).x);\n      block9 = step(shadowNDCPos.z, texture(shadowMap, offset9).x);\n      block10 = step(shadowNDCPos.z, texture(shadowMap, offset10).x);\n      block11 = step(shadowNDCPos.z, texture(shadowMap, offset11).x);\n      block12 = step(shadowNDCPos.z, texture(shadowMap, offset12).x);\n      block13 = step(shadowNDCPos.z, texture(shadowMap, offset13).x);\n      block14 = step(shadowNDCPos.z, texture(shadowMap, offset14).x);\n      block15 = step(shadowNDCPos.z, texture(shadowMap, offset15).x);\n      block16 = step(shadowNDCPos.z, texture(shadowMap, offset16).x);\n      block17 = step(shadowNDCPos.z, texture(shadowMap, offset17).x);\n      block18 = step(shadowNDCPos.z, texture(shadowMap, offset18).x);\n      block19 = step(shadowNDCPos.z, texture(shadowMap, offset19).x);\n      block20 = step(shadowNDCPos.z, texture(shadowMap, offset20).x);\n      block21 = step(shadowNDCPos.z, texture(shadowMap, offset21).x);\n      block22 = step(shadowNDCPos.z, texture(shadowMap, offset22).x);\n      block23 = step(shadowNDCPos.z, texture(shadowMap, offset23).x);\n      block24 = step(shadowNDCPos.z, texture(shadowMap, offset24).x);\n      block25 = step(shadowNDCPos.z, texture(shadowMap, offset25).x);\n    #endif\n    vec2 coef = fract(shadowNDCPos.xy * shadowMapResolution);\n    vec2 v1X1 = mix(vec2(block1, block6), vec2(block2, block7), coef.xx);\n    vec2 v1X2 = mix(vec2(block2, block7), vec2(block3, block8), coef.xx);\n    vec2 v1X3 = mix(vec2(block3, block8), vec2(block4, block9), coef.xx);\n    vec2 v1X4 = mix(vec2(block4, block9), vec2(block5, block10), coef.xx);\n    float v1 = mix(v1X1.x, v1X1.y, coef.y) + mix(v1X2.x, v1X2.y, coef.y) + mix(v1X3.x, v1X3.y, coef.y) + mix(v1X4.x, v1X4.y, coef.y);\n    vec2 v2X1 = mix(vec2(block6, block11), vec2(block7, block12), coef.xx);\n    vec2 v2X2 = mix(vec2(block7, block12), vec2(block8, block13), coef.xx);\n    vec2 v2X3 = mix(vec2(block8, block13), vec2(block9, block14), coef.xx);\n    vec2 v2X4 = mix(vec2(block9, block14), vec2(block10, block15), coef.xx);\n    float v2 = mix(v2X1.x, v2X1.y, coef.y) + mix(v2X2.x, v2X2.y, coef.y) + mix(v2X3.x, v2X3.y, coef.y) + mix(v2X4.x, v2X4.y, coef.y);\n    vec2 v3X1 = mix(vec2(block11, block16), vec2(block12, block17), coef.xx);\n    vec2 v3X2 = mix(vec2(block12, block17), vec2(block13, block18), coef.xx);\n    vec2 v3X3 = mix(vec2(block13, block18), vec2(block14, block19), coef.xx);\n    vec2 v3X4 = mix(vec2(block14, block19), vec2(block15, block20), coef.xx);\n    float v3 = mix(v3X1.x, v3X1.y, coef.y) + mix(v3X2.x, v3X2.y, coef.y) + mix(v3X3.x, v3X3.y, coef.y) + mix(v3X4.x, v3X4.y, coef.y);\n    vec2 v4X1 = mix(vec2(block16, block21), vec2(block17, block22), coef.xx);\n    vec2 v4X2 = mix(vec2(block17, block22), vec2(block18, block23), coef.xx);\n    vec2 v4X3 = mix(vec2(block18, block23), vec2(block19, block24), coef.xx);\n    vec2 v4X4 = mix(vec2(block19, block24), vec2(block20, block25), coef.xx);\n    float v4 = mix(v4X1.x, v4X1.y, coef.y) + mix(v4X2.x, v4X2.y, coef.y) + mix(v4X3.x, v4X3.y, coef.y) + mix(v4X4.x, v4X4.y, coef.y);\n    float fAvg = (v1 + v2 + v3 + v4) * 0.0625;\n    return fAvg;\n  }\n  bool GetShadowNDCPos(out vec3 shadowNDCPos, vec4 shadowPosWithDepthBias)\n  {\n  \tshadowNDCPos = shadowPosWithDepthBias.xyz / shadowPosWithDepthBias.w * 0.5 + 0.5;\n  \tif (shadowNDCPos.x < 0.0 || shadowNDCPos.x > 1.0 ||\n  \t\tshadowNDCPos.y < 0.0 || shadowNDCPos.y > 1.0 ||\n  \t\tshadowNDCPos.z < 0.0 || shadowNDCPos.z > 1.0) {\n  \t\treturn false;\n  \t}\n  \tshadowNDCPos.xy = cc_cameraPos.w == 1.0 ? vec2(shadowNDCPos.xy.x, 1.0 - shadowNDCPos.xy.y) : shadowNDCPos.xy;\n  \treturn true;\n  }\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias, vec3 matViewDir0, vec3 matViewDir1, vec3 matViewDir2, vec2 projScaleXY)\n  {\n    vec4 newShadowPos = shadowPos;\n    if (normalBias > EPSILON_LOWP)\n    {\n      vec3 viewNormal = vec3(dot(matViewDir0, worldNormal), dot(matViewDir1, worldNormal), dot(matViewDir2, worldNormal));\n      if (viewNormal.z < 0.1)\n        newShadowPos.xy += viewNormal.xy * projScaleXY * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n    }\n    return newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias, mat4 matLightView, vec2 projScaleXY)\n  {\n  \tvec4 newShadowPos = shadowPos;\n  \tif (normalBias > EPSILON_LOWP)\n  \t{\n  \t\tvec4 viewNormal = matLightView * vec4(worldNormal, 0.0);\n  \t\tif (viewNormal.z < 0.1)\n  \t\t\tnewShadowPos.xy += viewNormal.xy * projScaleXY * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n  \t}\n  \treturn newShadowPos;\n  }\n  float GetViewSpaceDepthFromNDCDepth_Orthgraphic(float NDCDepth, float projScaleZ, float projBiasZ)\n  {\n  \treturn (NDCDepth - projBiasZ) / projScaleZ;\n  }\n  vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias, float projScaleZ, float projBiasZ)\n  {\n  \tfloat coeffA = projScaleZ;\n  \tfloat coeffB = projBiasZ;\n  \tfloat viewSpacePos_z = GetViewSpaceDepthFromNDCDepth_Orthgraphic(shadowPos.z, projScaleZ, projBiasZ);\n  \tviewSpacePos_z += viewspaceDepthBias;\n  \tvec4 result = shadowPos;\n  \tresult.z = viewSpacePos_z * coeffA + coeffB;\n  \treturn result;\n  }\n  float CCGetDirLightShadowFactorHard (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorHard(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetDirLightShadowFactorSoft (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetDirLightShadowFactorSoft3X (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft3X(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetDirLightShadowFactorSoft5X (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft5X(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCShadowFactorBase(out vec4 shadowPosWithDepthBias, vec4 shadowPos, vec3 N, vec2 shadowBias)\n  {\n    vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N, shadowBias.y, cc_matLightView, cc_shadowProjInfo.xy);\n    pos = ApplyShadowDepthBias_Orthographic(pos, shadowBias.x, cc_shadowProjDepthInfo.x, cc_shadowProjDepthInfo.y);\n    float realtimeShadow = 1.0;\n    #if CC_DIR_SHADOW_PCF_TYPE == 3\n      realtimeShadow = CCGetDirLightShadowFactorSoft5X(pos);\n    #endif\n    #if CC_DIR_SHADOW_PCF_TYPE == 2\n      realtimeShadow =  CCGetDirLightShadowFactorSoft3X(pos);\n    #endif\n    #if CC_DIR_SHADOW_PCF_TYPE == 1\n      realtimeShadow = CCGetDirLightShadowFactorSoft(pos);\n    #endif\n    #if CC_DIR_SHADOW_PCF_TYPE == 0\n      realtimeShadow = CCGetDirLightShadowFactorHard(pos);\n    #endif\n    shadowPosWithDepthBias = pos;\n    return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n  }\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n    bool CCGetCSMLevelWithTransition(out highp float ratio, vec3 clipPos) {\n      highp float maxRange = 1.0 - cc_csmSplitsInfo.x;\n      highp float minRange = cc_csmSplitsInfo.x;\n      highp float thresholdInvert = 1.0 / cc_csmSplitsInfo.x;\n      ratio = 0.0;\n      if (clipPos.x <= minRange) {\n        ratio = clipPos.x * thresholdInvert;\n        return true;\n      }\n      if (clipPos.x >= maxRange) {\n        ratio = 1.0 - (clipPos.x - maxRange) * thresholdInvert;\n        return true;\n      }\n      if (clipPos.y <= minRange) {\n        ratio = clipPos.y  * thresholdInvert;\n        return true;\n      }\n      if (clipPos.y >= maxRange) {\n        ratio = 1.0 - (clipPos.y - maxRange) * thresholdInvert;\n        return true;\n      }\n      return false;\n    }\n    bool CCHasCSMLevel(int level, vec3 worldPos) {\n      highp float layerThreshold = cc_csmViewDir0[0].w;\n      bool hasLevel = false;\n      for (int i = 0; i < 4; i++) {\n        if (i == level) {\n          vec4 shadowPos = cc_matCSMViewProj[i] * vec4(worldPos.xyz, 1.0);\n          vec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\n          if (clipPos.x >= layerThreshold && clipPos.x <= (1.0 - layerThreshold) &&\n              clipPos.y >= layerThreshold && clipPos.y <= (1.0 - layerThreshold) &&\n              clipPos.z >= 0.0 && clipPos.z <= 1.0) {\n            hasLevel = true;\n          }\n        }\n      }\n      return hasLevel;\n    }\n    void CCGetCSMLevel(out vec4 csmPos, out vec4 shadowProjDepthInfo, out vec4 shadowProjInfo, out vec3 shadowViewDir0, out vec3 shadowViewDir1, out vec3 shadowViewDir2, vec3 worldPos, int level) {\n      highp float layerThreshold = cc_csmViewDir0[0].w;\n      for (int i = 0; i < 4; i++) {\n        vec4 shadowPos = cc_matCSMViewProj[i] * vec4(worldPos.xyz, 1.0);\n        vec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\n        if (clipPos.x >= layerThreshold && clipPos.x <= (1.0 - layerThreshold) &&\n            clipPos.y >= layerThreshold && clipPos.y <= (1.0 - layerThreshold) &&\n            clipPos.z >= 0.0 && clipPos.z <= 1.0 && i == level) {\n          csmPos = cc_matCSMViewProj[i] * vec4(worldPos.xyz, 1.0);\n          csmPos.xy = csmPos.xy * cc_csmAtlas[i].xy + cc_csmAtlas[i].zw;\n          shadowProjDepthInfo = cc_csmProjDepthInfo[i];\n          shadowProjInfo = cc_csmProjInfo[i];\n          shadowViewDir0 = cc_csmViewDir0[i].xyz;\n          shadowViewDir1 = cc_csmViewDir1[i].xyz;\n          shadowViewDir2 = cc_csmViewDir2[i].xyz;\n        }\n      }\n    }\n    int CCGetCSMLevel(out bool isTransitionArea, out highp float transitionRatio, out vec4 csmPos, out vec4 shadowProjDepthInfo, out vec4 shadowProjInfo, out vec3 shadowViewDir0, out vec3 shadowViewDir1, out vec3 shadowViewDir2, vec3 worldPos)\n    {\n      int level = -1;\n      highp float layerThreshold = cc_csmViewDir0[0].w;\n      for (int i = 0; i < 4; i++) {\n        vec4 shadowPos = cc_matCSMViewProj[i] * vec4(worldPos.xyz, 1.0);\n        vec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\n        if (clipPos.x >= layerThreshold && clipPos.x <= (1.0 - layerThreshold) &&\n            clipPos.y >= layerThreshold && clipPos.y <= (1.0 - layerThreshold) &&\n            clipPos.z >= 0.0 && clipPos.z <= 1.0 && level < 0) {\n          #if CC_CASCADED_LAYERS_TRANSITION\n            isTransitionArea = CCGetCSMLevelWithTransition(transitionRatio, clipPos);\n          #endif\n          csmPos = cc_matCSMViewProj[i] * vec4(worldPos.xyz, 1.0);\n          csmPos.xy = csmPos.xy * cc_csmAtlas[i].xy + cc_csmAtlas[i].zw;\n          shadowProjDepthInfo = cc_csmProjDepthInfo[i];\n          shadowProjInfo = cc_csmProjInfo[i];\n          shadowViewDir0 = cc_csmViewDir0[i].xyz;\n          shadowViewDir1 = cc_csmViewDir1[i].xyz;\n          shadowViewDir2 = cc_csmViewDir2[i].xyz;\n          level = i;\n        }\n      }\n      return level;\n    }\n    int CCGetCSMLevel(out vec4 csmPos, out vec4 shadowProjDepthInfo, out vec4 shadowProjInfo, out vec3 shadowViewDir0, out vec3 shadowViewDir1, out vec3 shadowViewDir2, vec3 worldPos)\n    {\n      bool isTransitionArea = false;\n      highp float transitionRatio = 0.0;\n      return CCGetCSMLevel(isTransitionArea, transitionRatio, csmPos, shadowProjDepthInfo, shadowProjInfo, shadowViewDir0, shadowViewDir1, shadowViewDir2, worldPos);\n    }\n    float CCCSMFactorBase(out vec4 csmPos, out vec4 csmPosWithBias, vec3 worldPos, vec3 N, vec2 shadowBias)\n    {\n      bool isTransitionArea = false;\n      highp float ratio = 0.0;\n      csmPos = vec4(1.0);\n      vec4 shadowProjDepthInfo, shadowProjInfo;\n      vec3 shadowViewDir0, shadowViewDir1, shadowViewDir2;\n      int level = -1;\n      #if CC_CASCADED_LAYERS_TRANSITION\n        level = CCGetCSMLevel(isTransitionArea, ratio, csmPos, shadowProjDepthInfo, shadowProjInfo, shadowViewDir0, shadowViewDir1, shadowViewDir2, worldPos);\n      #else\n        level = CCGetCSMLevel(csmPos, shadowProjDepthInfo, shadowProjInfo, shadowViewDir0, shadowViewDir1, shadowViewDir2, worldPos);\n      #endif\n      if (level < 0) { return 1.0; }\n      vec4 pos = ApplyShadowDepthBias_FaceNormal(csmPos, N, shadowBias.y, shadowViewDir0, shadowViewDir1, shadowViewDir2, shadowProjInfo.xy);\n      pos = ApplyShadowDepthBias_Orthographic(pos, shadowBias.x, shadowProjDepthInfo.x, shadowProjDepthInfo.y);\n      csmPosWithBias = pos;\n      float realtimeShadow = 1.0;\n      #if CC_DIR_SHADOW_PCF_TYPE == 3\n        realtimeShadow = CCGetDirLightShadowFactorSoft5X(pos);\n      #endif\n      #if CC_DIR_SHADOW_PCF_TYPE == 2\n        realtimeShadow = CCGetDirLightShadowFactorSoft3X(pos);\n      #endif\n      #if CC_DIR_SHADOW_PCF_TYPE == 1\n        realtimeShadow = CCGetDirLightShadowFactorSoft(pos);\n      #endif\n      #if CC_DIR_SHADOW_PCF_TYPE == 0\n        realtimeShadow = CCGetDirLightShadowFactorHard(pos);\n      #endif\n      #if CC_CASCADED_LAYERS_TRANSITION\n        vec4 nextCSMPos = vec4(1.0);\n        vec4 nextShadowProjDepthInfo, nextShadowProjInfo;\n        vec3 nextShadowViewDir0, nextShadowViewDir1, nextShadowViewDir2;\n        float nextRealtimeShadow = 1.0;\n        CCGetCSMLevel(nextCSMPos, nextShadowProjDepthInfo, nextShadowProjInfo, nextShadowViewDir0, nextShadowViewDir1, nextShadowViewDir2, worldPos, level + 1);\n        bool hasNextLevel = CCHasCSMLevel(level + 1, worldPos);\n        if (hasNextLevel && isTransitionArea) {\n          vec4 nexPos = ApplyShadowDepthBias_FaceNormal(nextCSMPos, N, shadowBias.y, nextShadowViewDir0, nextShadowViewDir1, nextShadowViewDir2, nextShadowProjInfo.xy);\n          nexPos = ApplyShadowDepthBias_Orthographic(nexPos, shadowBias.x, nextShadowProjDepthInfo.x, nextShadowProjDepthInfo.y);\n          #if CC_DIR_SHADOW_PCF_TYPE == 3\n            nextRealtimeShadow = CCGetDirLightShadowFactorSoft5X(nexPos);\n          #endif\n          #if CC_DIR_SHADOW_PCF_TYPE == 2\n            nextRealtimeShadow = CCGetDirLightShadowFactorSoft3X(nexPos);\n          #endif\n          #if CC_DIR_SHADOW_PCF_TYPE == 1\n            nextRealtimeShadow = CCGetDirLightShadowFactorSoft(nexPos);\n          #endif\n          #if CC_DIR_SHADOW_PCF_TYPE == 0\n            nextRealtimeShadow = CCGetDirLightShadowFactorHard(nexPos);\n          #endif\n          return mix(mix(nextRealtimeShadow, realtimeShadow, ratio), 1.0, cc_shadowNFLSInfo.w);\n        }\n        return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n      #else\n        return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n      #endif\n    }\n  #else\n    int CCGetCSMLevel(out vec4 csmPos, out vec4 shadowProjDepthInfo, out vec4 shadowProjInfo, out vec3 shadowViewDir0, out vec3 shadowViewDir1, out vec3 shadowViewDir2, vec3 worldPos) {\n      return -1;\n    }\n    float CCCSMFactorBase(out vec4 csmPos, out vec4 csmPosWithBias, vec3 worldPos, vec3 N, vec2 shadowBias) {\n      csmPos = cc_matLightViewProj * vec4(worldPos, 1.0);\n      return CCShadowFactorBase(csmPosWithBias, csmPos, N, shadowBias);\n    }\n  #endif\n  float CCShadowFactorBase(vec4 shadowPos, vec3 N, vec2 shadowBias) {\n    vec4 shadowPosWithDepthBias;\n    return CCShadowFactorBase(shadowPosWithDepthBias, shadowPos, N, shadowBias);\n  }\n  float CCCSMFactorBase(vec3 worldPos, vec3 N, vec2 shadowBias) {\n    vec4 csmPos, csmPosWithBias;\n    return CCCSMFactorBase(csmPos, csmPosWithBias, worldPos, N, shadowBias);\n  }\n#endif\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nvec4 packRGBE (vec3 rgb) {\n  highp float maxComp = max(max(rgb.r, rgb.g), rgb.b);\n  highp float e = 128.0;\n  if (maxComp > 0.0001) {\n    e = log(maxComp) / log(1.1);\n    e = ceil(e);\n    e = clamp(e + 128.0, 0.0, 255.0);\n  }\n  highp float sc = 1.0 / pow(1.1, e - 128.0);\n  vec3 encode = clamp(rgb * sc, vec3(0.0), vec3(1.0)) * 255.0;\n  vec3 encode_rounded = floor(encode) + step(encode - floor(encode), vec3(0.5));\n  return vec4(encode_rounded, e) / 255.0;\n}\nvec3 unpackRGBE (vec4 rgbe) {\n  return rgbe.rgb * pow(1.1, rgbe.a * 255.0 - 128.0);\n}\nvec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n    return textureLod(tex, coord, lod);\n}\nvec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n    return textureLod(tex, coord, lod);\n}\nlayout(set = 0, binding = 5) uniform samplerCube cc_environment;\nvec3 CalculateReflectDirection(vec3 N, vec3 V, float NoV)\n{\n  float sideSign = NoV < 0.0 ? -1.0 : 1.0;\n  N *= sideSign;\n  return reflect(-V, N);\n}\nvec3 CalculatePlanarReflectPositionOnPlane(vec3 N, vec3 V, vec3 worldPos, vec4 plane, vec3 cameraPos, float probeReflectedDepth)\n{\n  float distPixelToPlane = -dot(plane, vec4(worldPos, 1.0));\n  plane.w += distPixelToPlane;\n  float distCameraToPlane = abs(-dot(plane, vec4(cameraPos, 1.0)));\n  vec3 planeN = plane.xyz;\n  vec3 virtualCameraPos = cameraPos - 2.0 * distCameraToPlane * planeN;\n  vec3 bumpedR = normalize(reflect(-V, N));\n  vec3 reflectedPointPos = worldPos + probeReflectedDepth * bumpedR;\n  vec3 virtualCameraToReflectedPoint = normalize(reflectedPointPos - virtualCameraPos);\n  float y = distCameraToPlane / max(EPSILON_LOWP, dot(planeN, virtualCameraToReflectedPoint));\n  return virtualCameraPos + y * virtualCameraToReflectedPoint;\n}\nvec4 CalculateBoxProjectedDirection(vec3 R, vec3 worldPos, vec3 cubeCenterPos, vec3 cubeBoxHalfSize)\n{\n  vec3 W = worldPos - cubeCenterPos;\n  vec3 projectedLength = (sign(R) * cubeBoxHalfSize - W) / (R + vec3(EPSILON));\n  float len = min(min(projectedLength.x, projectedLength.y), projectedLength.z);\n  vec3 P = W + len * R;\n  float weight = len < 0.0 ? 0.0 : 1.0;\n  return vec4(P, weight);\n}\n#if CC_USE_IBL\n  #if CC_USE_DIFFUSEMAP\n    layout(set = 0, binding = 7) uniform samplerCube cc_diffuseMap;\n  #endif\n#endif\n#if CC_USE_REFLECTION_PROBE\n  layout(set = 2, binding = 15) uniform samplerCube cc_reflectionProbeCubemap;\n  layout(set = 2, binding = 16) uniform sampler2D cc_reflectionProbePlanarMap;\n  layout(set = 2, binding = 17) uniform sampler2D cc_reflectionProbeDataMap;\n  layout(set = 2, binding = 18) uniform samplerCube cc_reflectionProbeBlendCubemap;\n  layout(set = 2, binding = 0) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n    highp vec4 cc_localShadowBias;\n    highp vec4 cc_reflectionProbeData1;\n    highp vec4 cc_reflectionProbeData2;\n    highp vec4 cc_reflectionProbeBlendData1;\n    highp vec4 cc_reflectionProbeBlendData2;\n  };\n  vec4 GetTexData(sampler2D dataMap, float dataMapWidth, float x, float uv_y)\n  {\n    return vec4(\n        decode32(texture(dataMap, vec2(((x + 0.5)/dataMapWidth), uv_y))),\n        decode32(texture(dataMap, vec2(((x + 1.5)/dataMapWidth), uv_y))),\n        decode32(texture(dataMap, vec2(((x + 2.5)/dataMapWidth), uv_y))),\n        decode32(texture(dataMap, vec2(((x + 3.5)/dataMapWidth), uv_y)))\n      );\n  }\n  void GetPlanarReflectionProbeData(out vec4 plane, out float planarReflectionDepthScale, out float mipCount, float probeId)\n  {\n      #if USE_INSTANCING\n        float uv_y = (probeId + 0.5) / cc_probeInfo.x;\n        float dataMapWidth = 12.0;\n        vec4 texData1 = GetTexData(cc_reflectionProbeDataMap, dataMapWidth, 0.0, uv_y);\n        vec4 texData2 = GetTexData(cc_reflectionProbeDataMap, dataMapWidth, 4.0, uv_y);\n        plane.xyz = texData1.xyz;\n        plane.w = texData2.x;\n        planarReflectionDepthScale = texData2.y;\n        mipCount = texData2.z;\n      #else\n        plane = cc_reflectionProbeData1;\n        planarReflectionDepthScale = cc_reflectionProbeData2.x;\n        mipCount = cc_reflectionProbeData2.w;\n      #endif\n  }\n  void GetCubeReflectionProbeData(out vec3 centerPos, out vec3 boxHalfSize, out float mipCount, float probeId)\n  {\n      #if USE_INSTANCING\n        float uv_y = (probeId + 0.5) / cc_probeInfo.x;\n        float dataMapWidth = 12.0;\n        vec4 texData1 = GetTexData(cc_reflectionProbeDataMap, dataMapWidth, 0.0, uv_y);\n        vec4 texData2 = GetTexData(cc_reflectionProbeDataMap, dataMapWidth, 4.0, uv_y);\n        vec4 texData3 = GetTexData(cc_reflectionProbeDataMap, dataMapWidth, 8.0, uv_y);\n        centerPos = texData1.xyz;\n        boxHalfSize = texData2.xyz;\n        mipCount = texData3.x;\n      #else\n        centerPos = cc_reflectionProbeData1.xyz;\n        boxHalfSize = cc_reflectionProbeData2.xyz;\n        mipCount = cc_reflectionProbeData2.w;\n      #endif\n      if (mipCount > 1000.0) mipCount -= 1000.0;\n  }\n  bool isReflectProbeUsingRGBE(float probeId)\n  {\n    #if USE_INSTANCING\n        float uv_y = (probeId + 0.5) / cc_probeInfo.x;\n        float dataMapWidth = 12.0;\n        vec4 texData3 = GetTexData(cc_reflectionProbeDataMap, dataMapWidth, 8.0, uv_y);\n        return texData3.x > 1000.0;\n    #else\n      return cc_reflectionProbeData2.w > 1000.0;\n    #endif\n  }\n  bool isBlendReflectProbeUsingRGBE(float probeId)\n  {\n    #if USE_INSTANCING\n        float uv_y = (probeId + 0.5) / cc_probeInfo.x;\n        float dataMapWidth = 12.0;\n        vec4 texData3 = GetTexData(cc_reflectionProbeDataMap, dataMapWidth, 8.0, uv_y);\n        return texData3.x > 1000.0;\n    #else\n      return cc_reflectionProbeBlendData2.w > 1000.0;\n    #endif\n  }\n  void GetBlendCubeReflectionProbeData(out vec3 centerPos, out vec3 boxHalfSize, out float mipCount, float probeId)\n  {\n      #if USE_INSTANCING\n        float uv_y = (probeId + 0.5) / cc_probeInfo.x;\n        float dataMapWidth = 12.0;\n        vec4 texData1 = GetTexData(cc_reflectionProbeDataMap, dataMapWidth, 0.0, uv_y);\n        vec4 texData2 = GetTexData(cc_reflectionProbeDataMap, dataMapWidth, 4.0, uv_y);\n        vec4 texData3 = GetTexData(cc_reflectionProbeDataMap, dataMapWidth, 8.0, uv_y);\n        centerPos = texData1.xyz;\n        boxHalfSize = texData2.xyz;\n        mipCount = texData3.x;\n      #else\n        centerPos = cc_reflectionProbeBlendData1.xyz;\n        boxHalfSize = cc_reflectionProbeBlendData2.xyz;\n        mipCount = cc_reflectionProbeBlendData2.w;\n      #endif\n      if (mipCount > 1000.0) mipCount -= 1000.0;\n  }\n#endif\n#if CC_USE_LIGHT_PROBE\n#if CC_USE_LIGHT_PROBE\n  #if USE_INSTANCING\n    layout(location = 15) in mediump vec4 v_sh_linear_const_r;\n    layout(location = 16) in mediump vec4 v_sh_linear_const_g;\n    layout(location = 17) in mediump vec4 v_sh_linear_const_b;\n  #else\n    layout(set = 2, binding = 6) uniform CCSH {\n      vec4 cc_sh_linear_const_r;\n      vec4 cc_sh_linear_const_g;\n      vec4 cc_sh_linear_const_b;\n      vec4 cc_sh_quadratic_r;\n      vec4 cc_sh_quadratic_g;\n      vec4 cc_sh_quadratic_b;\n      vec4 cc_sh_quadratic_a;\n    };\n  #endif\n  #if CC_USE_LIGHT_PROBE\n  vec3 SHEvaluate(vec3 normal)\n  {\n      vec3 result;\n  #if USE_INSTANCING\n      vec4 normal4 = vec4(normal, 1.0);\n      result.r = dot(v_sh_linear_const_r, normal4);\n      result.g = dot(v_sh_linear_const_g, normal4);\n      result.b = dot(v_sh_linear_const_b, normal4);\n  #else\n      vec4 normal4 = vec4(normal, 1.0);\n      result.r = dot(cc_sh_linear_const_r, normal4);\n      result.g = dot(cc_sh_linear_const_g, normal4);\n      result.b = dot(cc_sh_linear_const_b, normal4);\n      vec4 n14 = normal.xyzz * normal.yzzx;\n      float n5 = normal.x * normal.x - normal.y * normal.y;\n      result.r += dot(cc_sh_quadratic_r, n14);\n      result.g += dot(cc_sh_quadratic_g, n14);\n      result.b += dot(cc_sh_quadratic_b, n14);\n      result += (cc_sh_quadratic_a.rgb * n5);\n  #endif\n    #if CC_USE_HDR\n      result *= cc_exposure.w * cc_exposure.x;\n    #endif\n    return result;\n  }\n  #endif\n#endif\n#endif\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / max(EPSILON, OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness * 0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n  vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return max(vec3(0.0), specular * AB.x + AB.y);\n}\n#if USE_REFLECTION_DENOISE\n  vec3 GetEnvReflectionWithMipFiltering(vec3 R, float roughness, float mipCount, float denoiseIntensity, vec2 screenUV) {\n    #if CC_USE_IBL\n    \tfloat mip = roughness * (mipCount - 1.0);\n    \tfloat delta = (dot(dFdx(R), dFdy(R))) * 1000.0;\n    \tfloat mipBias = mix(0.0, 5.0, clamp(delta, 0.0, 1.0));\n      #if CC_USE_REFLECTION_PROBE == REFLECTION_PROBE_TYPE_CUBE\n        vec4 biased = fragTextureLod(cc_reflectionProbeCubemap, R, mip + mipBias);\n     \t  vec4 filtered = texture(cc_reflectionProbeCubemap, R);\n      #elif CC_USE_REFLECTION_PROBE == REFLECTION_PROBE_TYPE_PLANAR\n        vec4 biased = fragTextureLod(cc_reflectionProbePlanarMap, screenUV, mip + mipBias);\n        vec4 filtered = texture(cc_reflectionProbePlanarMap, screenUV);\n      #else\n        vec4 biased = fragTextureLod(cc_environment, R, mip + mipBias);\n     \t  vec4 filtered = texture(cc_environment, R);\n      #endif\n      #if CC_USE_IBL == 2 || CC_USE_REFLECTION_PROBE != REFLECTION_PROBE_TYPE_NONE\n        biased.rgb = unpackRGBE(biased);\n      \tfiltered.rgb = unpackRGBE(filtered);\n      #else\n      \tbiased.rgb = SRGBToLinear(biased.rgb);\n      \tfiltered.rgb = SRGBToLinear(filtered.rgb);\n      #endif\n      return mix(biased.rgb, filtered.rgb, denoiseIntensity);\n    #else\n      return vec3(0.0, 0.0, 0.0);\n    #endif\n  }\n#endif\nstruct StandardSurface {\n  vec4 albedo;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    vec3 position, position_fract_part;\n    #else\n    vec3 position;\n    #endif\n  vec3 normal;\n  vec3 emissive;\n  vec4 lightmap;\n  float lightmap_test;\n  float roughness;\n  float metallic;\n  float occlusion;\n  float specularIntensity;\n  #if CC_RECEIVE_SHADOW\n    vec2 shadowBias;\n  #endif\n  #if CC_RECEIVE_SHADOW || CC_USE_REFLECTION_PROBE\n    float reflectionProbeId;\n  #endif\n  #if CC_USE_REFLECTION_PROBE == REFLECTION_PROBE_TYPE_BLEND || CC_USE_REFLECTION_PROBE == REFLECTION_PROBE_TYPE_BLEND_AND_SKYBOX\n    float reflectionProbeBlendId;\n    float reflectionProbeBlendFactor;\n  #endif\n};\n vec3 SampleReflectionProbe(samplerCube tex, vec3 R, float roughness, float mipCount, bool isRGBE) {\n    vec4 envmap = fragTextureLod(tex, R, roughness * (mipCount - 1.0));\n    if (isRGBE)\n      return unpackRGBE(envmap);\n    else\n      return SRGBToLinear(envmap.rgb);\n  }\nvec4 CCStandardShadingBase (StandardSurface s, vec4 shadowPos) {\n  vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n  vec3 specular = mix(vec3(0.08 * s.specularIntensity), s.albedo.rgb, s.metallic);\n  vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n  vec3 N = normalize(s.normal);\n  vec3 V = normalize(cc_cameraPos.xyz - position);\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  float NL = max(dot(N, L), 0.0);\n  float shadow = 1.0;\n  #if CC_RECEIVE_SHADOW && CC_SHADOW_TYPE == 2\n    if (NL > 0.0 && cc_mainLitDir.w > 0.0) {\n      #if CC_DIR_LIGHT_SHADOW_TYPE == 2\n        shadow = CCCSMFactorBase(position, N, s.shadowBias);\n      #endif\n      #if CC_DIR_LIGHT_SHADOW_TYPE == 1\n        shadow = CCShadowFactorBase(shadowPos, N, s.shadowBias);\n      #endif\n    }\n  #endif\n  vec3 finalColor = vec3(0.0);\n  #if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n    vec3 lightmap = s.lightmap.rgb;\n    #if CC_USE_HDR\n        lightmap.rgb *= cc_exposure.w * cc_exposure.x;\n    #endif\n    #if CC_USE_LIGHTMAP == LIGHT_MAP_TYPE_INDIRECT_OCCLUSION\n      shadow *= s.lightmap.a;\n      finalColor += diffuse * lightmap.rgb;\n    #else\n      finalColor += diffuse * lightmap.rgb * shadow;\n    #endif\n    s.occlusion *= s.lightmap_test;\n  #endif\n  #if !CC_DISABLE_DIRECTIONAL_LIGHT\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 H = normalize(L + V);\n    float NH = max(dot(N, H), 0.0);\n    vec3 lightingColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n    vec3 dirlightContrib = (diffuseContrib + specularContrib);\n    dirlightContrib *= shadow;\n    finalColor += lightingColor * dirlightContrib;\n  #endif\n  float fAmb = max(EPSILON, 0.5 - N.y * 0.5);\n  vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb);\n  vec3 env = vec3(0.0), rotationDir;\n  #if CC_USE_IBL\n    #if CC_USE_DIFFUSEMAP && !CC_USE_LIGHT_PROBE\n      rotationDir = RotationVecFromAxisY(N.xyz, cc_surfaceTransform.z, cc_surfaceTransform.w);\n      vec4 diffuseMap = texture(cc_diffuseMap, rotationDir);\n      #if CC_USE_DIFFUSEMAP == 2\n        ambDiff = unpackRGBE(diffuseMap);\n      #else\n        ambDiff = SRGBToLinear(diffuseMap.rgb);\n      #endif\n    #endif\n    #if !CC_USE_REFLECTION_PROBE\n      vec3 R = normalize(reflect(-V, N));\n      rotationDir = RotationVecFromAxisY(R.xyz, cc_surfaceTransform.z, cc_surfaceTransform.w);\n      #if USE_REFLECTION_DENOISE && !CC_IBL_CONVOLUTED\n        env = GetEnvReflectionWithMipFiltering(rotationDir, s.roughness, cc_ambientGround.w, 0.6, vec2(0.0));\n      #else\n        vec4 envmap = fragTextureLod(cc_environment, rotationDir, s.roughness * (cc_ambientGround.w - 1.0));\n        #if CC_USE_IBL == 2\n          env = unpackRGBE(envmap);\n        #else\n          env = SRGBToLinear(envmap.rgb);\n        #endif\n      #endif\n    #endif\n  #endif\n  float lightIntensity = cc_ambientSky.w;\n  #if CC_USE_REFLECTION_PROBE\n    vec4 probe = vec4(0.0);\n    vec3 R = normalize(reflect(-V, N));\n    #if CC_USE_REFLECTION_PROBE == REFLECTION_PROBE_TYPE_CUBE\n      if(s.reflectionProbeId < 0.0){\n        env = SampleReflectionProbe(cc_environment, R, s.roughness, cc_ambientGround.w, CC_USE_IBL == 2);\n      }else{\n        vec3 centerPos, boxHalfSize;\n        float mipCount;\n        GetCubeReflectionProbeData(centerPos, boxHalfSize, mipCount, s.reflectionProbeId);\n        vec4 fixedR = CalculateBoxProjectedDirection(R, position, centerPos, boxHalfSize);\n        env = mix(SampleReflectionProbe(cc_environment, R, s.roughness, cc_ambientGround.w, CC_USE_IBL == 2) * lightIntensity,\n          SampleReflectionProbe(cc_reflectionProbeCubemap, fixedR.xyz, s.roughness, mipCount, isReflectProbeUsingRGBE(s.reflectionProbeId)), fixedR.w);\n      }\n    #elif CC_USE_REFLECTION_PROBE == REFLECTION_PROBE_TYPE_PLANAR\n      if(s.reflectionProbeId < 0.0){\n        vec2 screenUV = GetPlanarReflectScreenUV(s.position, cc_matViewProj, cc_cameraPos.w, V, R);\n        probe = fragTextureLod(cc_reflectionProbePlanarMap, screenUV, 1.0);\n      }else{\n        vec4 plane;\n        float planarReflectionDepthScale, mipCount;\n        GetPlanarReflectionProbeData(plane, planarReflectionDepthScale, mipCount, s.reflectionProbeId);\n        R = normalize(CalculateReflectDirection(N, V, max(abs(dot(N, V)), 0.0)));\n        vec3 worldPosOffset = CalculatePlanarReflectPositionOnPlane(N, V, s.position, plane, cc_cameraPos.xyz, planarReflectionDepthScale);\n        vec2 screenUV = GetPlanarReflectScreenUV(worldPosOffset, cc_matViewProj, cc_cameraPos.w, V, R);\n        probe = fragTextureLod(cc_reflectionProbePlanarMap, screenUV, mipCount);\n      }\n      env = unpackRGBE(probe);\n    #elif CC_USE_REFLECTION_PROBE == REFLECTION_PROBE_TYPE_BLEND || CC_USE_REFLECTION_PROBE == REFLECTION_PROBE_TYPE_BLEND_AND_SKYBOX\n      if (s.reflectionProbeId < 0.0) {\n        env = SampleReflectionProbe(cc_environment, R, s.roughness, cc_ambientGround.w, CC_USE_IBL == 2);\n      } else {\n        vec3 centerPos, boxHalfSize;\n        float mipCount;\n        GetCubeReflectionProbeData(centerPos, boxHalfSize, mipCount, s.reflectionProbeId);\n        vec4 fixedR = CalculateBoxProjectedDirection(R, s.position, centerPos, boxHalfSize);\n        env = SampleReflectionProbe(cc_reflectionProbeCubemap, fixedR.xyz, s.roughness, mipCount, isReflectProbeUsingRGBE(s.reflectionProbeId));\n        if (s.reflectionProbeBlendId < 0.0) {\n          vec3 skyBoxEnv = SampleReflectionProbe(cc_environment, R, s.roughness, cc_ambientGround.w, CC_USE_IBL == 2) * lightIntensity;\n          #if CC_USE_REFLECTION_PROBE == REFLECTION_PROBE_TYPE_BLEND_AND_SKYBOX\n            env = mix(env, skyBoxEnv, s.reflectionProbeBlendFactor);\n          #else\n            env = mix(skyBoxEnv, env, fixedR.w);\n          #endif\n        } else {\n          vec3 centerPosBlend, boxHalfSizeBlend;\n          float mipCountBlend;\n          GetBlendCubeReflectionProbeData(centerPosBlend, boxHalfSizeBlend, mipCountBlend, s.reflectionProbeBlendId);\n          vec4 fixedRBlend = CalculateBoxProjectedDirection(R, s.position, centerPosBlend, boxHalfSizeBlend);\n          vec3 probe1 = SampleReflectionProbe(cc_reflectionProbeBlendCubemap, fixedRBlend.xyz, s.roughness, mipCountBlend, isBlendReflectProbeUsingRGBE(s.reflectionProbeBlendId));\n          env = mix(env, probe1, s.reflectionProbeBlendFactor);\n        }\n      }\n    #endif\n  #endif\n  #if CC_USE_REFLECTION_PROBE\n    lightIntensity = s.reflectionProbeId < 0.0 ? lightIntensity : 1.0;\n  #endif\n  finalColor += env * lightIntensity * specular * s.occlusion;\n#if CC_USE_LIGHT_PROBE\n  finalColor += SHEvaluate(N) * diffuse * s.occlusion;\n#endif\n  finalColor += ambDiff.rgb * cc_ambientSky.w * diffuse * s.occlusion;\n  finalColor += s.emissive;\n  return vec4(finalColor, s.albedo.a);\n}\n#if CC_FORWARD_ADD\n#if CC_PIPELINE_TYPE == 0\n  #define LIGHTS_PER_PASS 1\n#else\n  #define LIGHTS_PER_PASS 10\n#endif\n#if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\nlayout(set = 2, binding = 1) uniform CCForwardLight {\n  highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n  vec4 cc_lightColor[LIGHTS_PER_PASS];\n  vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n  vec4 cc_lightDir[LIGHTS_PER_PASS];\n  vec4 cc_lightBoundingSizeVS[LIGHTS_PER_PASS];\n};\n#endif\n#if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n#endif\n#endif\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_RGBE_OUTPUT\n    color = packRGBE(color.rgb);\n  #elif !CC_USE_FLOAT_OUTPUT\n    #if CC_USE_HDR && CC_TONE_MAPPING_TYPE == HDR_TONE_MAPPING_ACES\n      color.rgb = ACESToneMap(color.rgb);\n    #endif\n    color.rgb = LinearToSRGB(color.rgb);\n  #endif\n  return color;\n}\nlayout(location = 1) in highp vec4 v_shadowPos;\n#if CC_RECEIVE_SHADOW && CC_SHADOW_TYPE == 2\n#endif\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 tilingOffset2;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 miscParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n  vec4 highlightColor;\n  vec4 Fresnelcol;\n  vec4 rampParams;\n};\n#if CC_USE_FOG != 4\n  float LinearFog(vec4 pos, vec3 cameraPos, float fogStart, float fogEnd) {\n      vec4 wPos = pos;\n      float cam_dis = distance(cameraPos, wPos.xyz);\n      return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n  }\n  float ExpFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * fogDensity);\n      return f;\n  }\n  float ExpSquaredFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n      return f;\n  }\n  float LayeredFog(vec4 pos, vec3 cameraPos, float fogTop, float fogRange, float fogAtten) {\n      vec4 wPos = pos;\n      vec3 camWorldProj = cameraPos.xyz;\n      camWorldProj.y = 0.;\n      vec3 worldPosProj = wPos.xyz;\n      worldPosProj.y = 0.;\n      float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n      float fDeltaY, fDensityIntegral;\n      if (cameraPos.y > fogTop) {\n          if (wPos.y < fogTop) {\n              fDeltaY = (fogTop - wPos.y) / fogRange * 2.0;\n              fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n          }\n          else {\n              fDeltaY = 0.;\n              fDensityIntegral = 0.;\n          }\n      }\n      else {\n          if (wPos.y < fogTop) {\n              float fDeltaA = (fogTop - cameraPos.y) / fogRange * 2.;\n              float fDeltaB = (fogTop - wPos.y) / fogRange * 2.;\n              fDeltaY = abs(fDeltaA - fDeltaB);\n              fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n          }\n          else {\n              fDeltaY = abs(fogTop - cameraPos.y) / fogRange * 2.;\n              fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n          }\n      }\n      float fDensity;\n      if (fDeltaY != 0.) {\n          fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n      }\n      else {\n          fDensity = 0.;\n      }\n      float f = exp(-fDensity);\n      return f;\n  }\n#endif\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n#if CC_USE_FOG == 0\n\tfactor = LinearFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.y);\n#elif CC_USE_FOG == 1\n\tfactor = ExpFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 2\n\tfactor = ExpSquaredFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 3\n\tfactor = LayeredFog(pos, cc_cameraPos.xyz, cc_fogAdd.x, cc_fogAdd.y, cc_fogAdd.z);\n#else\n\tfactor = 1.0;\n#endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n\tcolor = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nlayout(location = 0) in mediump float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  layout(location = 14) in vec3 v_luv;\n  layout(set = 2, binding = 11) uniform sampler2D cc_lightingMap;\n#endif\nlayout(location = 3) in vec3 v_position;\nlayout(location = 4) in vec3 v_position_local;\nlayout(location = 5) in vec4 matWorldIT_R0;\nlayout(location = 6) in vec4 matWorldIT_R1;\nlayout(location = 7) in vec4 matWorldIT_R2;\nlayout(location = 8) in vec4 matWorldIT_R3;\nlayout(location = 10) in vec2 v_uv;\nlayout(location = 11) in vec2 v_uv1;\nlayout(location = 9) in vec3 v_normal;\n#if USE_VERTEX_COLOR\n  layout(location = 2) in vec4 v_color;\n#endif\n#if USE_ALBEDO_MAP\n  layout(set = 1, binding = 1) uniform sampler2D albedoMap;\n#endif\n#if USE_NORMAL_MAP\n  layout(location = 12) in vec3 v_tangent;\n  layout(location = 13) in vec3 v_bitangent;\n  layout(set = 1, binding = 2) uniform sampler2D normalMap;\n#endif\n#if USE_PBR_MAP\n  layout(set = 1, binding = 3) uniform sampler2D pbrMap;\n#endif\n#if USE_METALLIC_ROUGHNESS_MAP\n  layout(set = 1, binding = 4) uniform sampler2D metallicRoughnessMap;\n#endif\n#if USE_OCCLUSION_MAP\n  layout(set = 1, binding = 5) uniform sampler2D occlusionMap;\n#endif\n#if USE_EMISSIVE_MAP\n  layout(set = 1, binding = 6) uniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out StandardSurface s) {\n  vec4 baseColor = albedo;\n  #if USE_VERTEX_COLOR\n    baseColor.rgb *= SRGBToLinear(v_color.rgb);\n    baseColor.a *= v_color.a;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture(albedoMap, ALBEDO_UV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    baseColor *= texColor;\n  #endif\n  s.albedo = baseColor;\n  s.albedo.rgb *= albedoScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.albedo.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  #if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n    vec4 lightColor = texture(cc_lightingMap, v_luv.xy);\n    s.lightmap = lightColor.rgb;\n    s.lightmap_test = v_luv.z;\n  #endif\n  s.normal = v_normal;\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture(normalMap, NORMAL_UV).xyz - vec3(0.5);\n    s.normal =\n      (nmmp.x * miscParams.x) * normalize(v_tangent) +\n      (nmmp.y * miscParams.x) * normalize(v_bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  s.position = v_position;\n  vec4 pbr = pbrParams;\n  #if USE_PBR_MAP\n    vec4 res = texture(pbrMap, PBR_UV);\n    pbr.x *= res.r;\n    pbr.y *= res.g;\n    pbr.z *= res.b;\n    pbr.w *= res.w;\n  #endif\n  #if USE_METALLIC_ROUGHNESS_MAP\n    vec4 metallicRoughness = texture(metallicRoughnessMap, PBR_UV);\n    pbr.z *= metallicRoughness.b;\n    pbr.y *= metallicRoughness.g;\n  #endif\n  #if USE_OCCLUSION_MAP\n    pbr.x *= texture(occlusionMap, PBR_UV).r;\n  #endif\n  s.occlusion = clamp(pbr.x, 0.0, 0.96);\n  s.roughness = clamp(pbr.y, 0.04, 1.0);\n  s.specularIntensity = 0.5;\n  s.metallic = pbr.z;\n  s.emissive = emissive.rgb * emissiveScaleParam.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture(emissiveMap, EMISSIVE_UV).rgb);\n  #endif\n}\nvec4 frag () {\n  mat4 matWorldIT_L = mat4(matWorldIT_R0, matWorldIT_R1, matWorldIT_R2, matWorldIT_R3);\n  float fresnelBase = rampParams.x;\n  float fresnelScale = rampParams.y;\n  float fresnelIndensity = rampParams.z;\n  vec4 cc_cameraPoslocal = matWorldIT_L * cc_cameraPos;\n  vec3 N = normalize(v_normal);\n  vec3 lightDir = normalize(-cc_mainLitDir.xyz);\n  vec3 viewDir = normalize(cc_cameraPos.xyz - v_position);\n  StandardSurface s; surf(s);\n  vec4 color =  CCStandardShadingBase(s, v_shadowPos);\n  CC_APPLY_FOG(color);\n  float fresnel = fresnelBase + fresnelScale*pow(1.0-dot(N, viewDir), fresnelIndensity);\n  color.rgb += mix((color.rgb)+(highlightColor.rgb), Fresnelcol.rgb, fresnel) * Fresnelcol.a;\n  return CCFragOutput(color);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]},{"name":"CCShadow","defines":[]},{"name":"CCCSM","defines":["CC_SUPPORT_CASCADED_SHADOW_MAP"]}],"samplerTextures":[{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotShadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_environment","defines":[]},{"name":"cc_diffuseMap","defines":["CC_USE_IBL","CC_USE_DIFFUSEMAP"]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","!CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"CCLocal","defines":["!USE_INSTANCING"]},{"name":"CCSH","defines":["CC_USE_LIGHT_PROBE","!USE_INSTANCING"]},{"name":"CCForwardLight","defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_realtimeJoint","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"cc_reflectionProbeCubemap","defines":["CC_USE_REFLECTION_PROBE"]},{"name":"cc_reflectionProbePlanarMap","defines":["CC_USE_REFLECTION_PROBE"]},{"name":"cc_reflectionProbeDataMap","defines":["CC_USE_REFLECTION_PROBE"]},{"name":"cc_reflectionProbeBlendCubemap","defines":["CC_USE_REFLECTION_PROBE"]},{"name":"cc_lightingMap","defines":["CC_USE_LIGHTMAP","!CC_FORWARD_ADD"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":142,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":131}},"defines":[{"name":"USE_INSTANCING","type":"boolean"},{"name":"CC_USE_SKINNING","type":"boolean"},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean"},{"name":"CC_USE_LIGHTMAP","type":"number","range":[0,3]},{"name":"CC_USE_REFLECTION_PROBE","type":"number","range":[0,3]},{"name":"CC_RECEIVE_SHADOW","type":"boolean"},{"name":"CC_USE_LIGHT_PROBE","type":"boolean","default":0},{"name":"CC_USE_MORPH","type":"boolean"},{"name":"CC_MORPH_TARGET_COUNT","type":"number","range":[2,8]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean"},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean"},{"name":"CC_USE_REAL_TIME_JOINT_TEXTURE","type":"boolean"},{"name":"CC_USE_FOG","type":"number","range":[0,4]},{"name":"CC_USE_ACCURATE_FOG","type":"boolean"},{"name":"CC_SUPPORT_CASCADED_SHADOW_MAP","type":"boolean"},{"name":"USE_VERTEX_COLOR","type":"boolean"},{"name":"USE_NORMAL_MAP","type":"boolean"},{"name":"HAS_SECOND_UV","type":"boolean"},{"name":"CC_FORWARD_ADD","type":"boolean"},{"name":"SAMPLE_FROM_RT","type":"boolean"},{"name":"CC_USE_DEBUG_VIEW","type":"number","range":[0,3]},{"name":"CC_SURFACES_ENABLE_DEBUG_VIEW","type":"boolean"},{"name":"CC_SHADOWMAP_FORMAT","type":"number","range":[0,3]},{"name":"CC_DIR_SHADOW_PCF_TYPE","type":"number","range":[0,3]},{"name":"CC_CASCADED_LAYERS_TRANSITION","type":"boolean"},{"name":"CC_USE_IBL","type":"number","range":[0,2]},{"name":"CC_USE_DIFFUSEMAP","type":"number","range":[0,2]},{"name":"CC_USE_HDR","type":"boolean"},{"name":"USE_REFLECTION_DENOISE","type":"boolean"},{"name":"CC_SHADOW_TYPE","type":"number","range":[0,3]},{"name":"CC_DIR_LIGHT_SHADOW_TYPE","type":"number","range":[0,3]},{"name":"CC_DISABLE_DIRECTIONAL_LIGHT","type":"boolean"},{"name":"CC_IBL_CONVOLUTED","type":"boolean"},{"name":"CC_PIPELINE_TYPE","type":"number","range":[0,1]},{"name":"CC_FORCE_FORWARD_SHADING","type":"boolean"},{"name":"CC_ENABLE_CLUSTERED_LIGHT_CULLING","type":"number","range":[0,3]},{"name":"CC_USE_RGBE_OUTPUT","type":"boolean"},{"name":"CC_USE_FLOAT_OUTPUT","type":"boolean"},{"name":"CC_TONE_MAPPING_TYPE","type":"number","range":[0,3]},{"name":"HDR_TONE_MAPPING_ACES","type":"boolean"},{"name":"USE_ALBEDO_MAP","type":"boolean"},{"name":"ALBEDO_UV","type":"string","options":["v_uv","v_uv1"]},{"name":"NORMAL_UV","type":"string","options":["v_uv","v_uv1"]},{"name":"PBR_UV","type":"string","options":["v_uv","v_uv1"]},{"name":"USE_PBR_MAP","type":"boolean"},{"name":"USE_METALLIC_ROUGHNESS_MAP","type":"boolean"},{"name":"USE_OCCLUSION_MAP","type":"boolean"},{"name":"USE_EMISSIVE_MAP","type":"boolean"},{"name":"EMISSIVE_UV","type":"string","options":["v_uv","v_uv1"]},{"name":"USE_ALPHA_TEST","type":"boolean"},{"name":"ALPHA_TEST_CHANNEL","type":"string","options":["a","r"]}]},{"hash":335794165,"name":"../res/shader/edgeLight|shadow-caster-vs:vert|shadow-caster-fs:frag","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"tilingOffset2","type":16,"count":1},{"name":"albedo","type":16,"count":1},{"name":"albedoScaleAndCutoff","type":16,"count":1},{"name":"pbrParams","type":16,"count":1},{"name":"miscParams","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScaleParam","type":16,"count":1},{"name":"highlightColor","type":16,"count":1},{"name":"Fresnelcol","type":16,"count":1},{"name":"rampParams","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"albedoMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_ALBEDO_MAP"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":6,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":7,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING","CC_USE_LIGHTMAP"]},{"name":"a_localShadowBiasAndProbeId","format":44,"isInstanced":true,"location":11,"defines":["USE_INSTANCING"]},{"name":"a_reflectionProbeData","format":44,"isInstanced":true,"location":12,"defines":["USE_INSTANCING","CC_USE_REFLECTION_PROBE"]},{"name":"a_sh_linear_const_r","format":44,"isInstanced":true,"location":13,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_sh_linear_const_g","format":44,"isInstanced":true,"location":14,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_sh_linear_const_b","format":44,"isInstanced":true,"location":15,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_vertexId","format":11,"location":16,"defines":["CC_USE_MORPH"]},{"name":"a_texCoord1","format":21,"location":17,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"descriptors":[{"rate":0,"blocks":[{"name":"CCMorph","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_displacementWeights","typename":"vec4","type":16,"count":15,"isArray":true},{"name":"cc_displacementTextureInfo","typename":"vec4","type":16,"count":1}],"defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_jointTextureInfo","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_jointAnimInfo","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_joints","typename":"vec4","type":16,"count":0,"precision":"highp ","isArray":true}],"defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","!CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"CCLocal","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_matWorld","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matWorldIT","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_lightingMapUVParam","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_localShadowBias","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData2","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeBlendData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeBlendData2","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["!USE_INSTANCING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","typename":"sampler2D","type":28,"count":1,"stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","typename":"sampler2D","type":28,"count":1,"stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","typename":"sampler2D","type":28,"count":1,"stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","typename":"sampler2D","type":28,"count":1,"precision":"highp ","stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_realtimeJoint","typename":"sampler2D","type":28,"count":1,"precision":"highp ","stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","CC_USE_REAL_TIME_JOINT_TEXTURE"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":1,"blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"tilingOffset2","type":16,"count":1},{"name":"albedo","type":16,"count":1},{"name":"albedoScaleAndCutoff","type":16,"count":1},{"name":"pbrParams","type":16,"count":1},{"name":"miscParams","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScaleParam","type":16,"count":1},{"name":"highlightColor","type":16,"count":1},{"name":"Fresnelcol","type":16,"count":1},{"name":"rampParams","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"albedoMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_ALBEDO_MAP"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":2,"blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":3,"blocks":[{"name":"CCShadow","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_matLightView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matLightViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_shadowInvProjDepthInfo","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_shadowProjDepthInfo","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_shadowProjInfo","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_shadowNFLSInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_shadowWHPBInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_shadowLPNNInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_shadowColor","typename":"vec4","type":16,"count":1,"precision":"lowp "},{"name":"cc_planarNDInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCSM","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_csmViewDir0","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmViewDir1","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmViewDir2","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmAtlas","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_matCSMViewProj","typename":"mat4","type":25,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmProjDepthInfo","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmProjInfo","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmSplitsInfo","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["CC_SUPPORT_CASCADED_SHADOW_MAP"]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]}],"glsl4":{"vert":"#extension GL_EXT_shader_explicit_arithmetic_types_int32: require\n  precision highp float;\n  #define QUATER_PI         0.78539816340\n  #define HALF_PI           1.57079632679\n  #define PI                3.14159265359\n  #define PI2               6.28318530718\n  #define PI4               12.5663706144\n  #define INV_QUATER_PI     1.27323954474\n  #define INV_HALF_PI       0.63661977237\n  #define INV_PI            0.31830988618\n  #define INV_PI2           0.15915494309\n  #define INV_PI4           0.07957747155\n  #define EPSILON           1e-6\n  #define EPSILON_LOWP      1e-4\n  #define LOG2              1.442695\n  #define EXP_VALUE         2.71828183\n  #define FP_MAX            65504.0\n  #define FP_SCALE          0.0009765625\n  #define FP_SCALE_INV      1024.0\n  #define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n      #define LIGHT_MAP_TYPE_DISABLED 0\n  #define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n  #define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n  #define REFLECTION_PROBE_TYPE_NONE 0\n  #define REFLECTION_PROBE_TYPE_CUBE 1\n  #define REFLECTION_PROBE_TYPE_PLANAR 2\n  #define REFLECTION_PROBE_TYPE_BLEND 3\n  #define REFLECTION_PROBE_TYPE_BLEND_AND_SKYBOX 4\n      #define LIGHT_TYPE_DIRECTIONAL 0.0\n  #define LIGHT_TYPE_SPHERE 1.0\n  #define LIGHT_TYPE_SPOT 2.0\n  #define LIGHT_TYPE_POINT 3.0\n  #define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n  #define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n  #define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n  #define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n  #define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n  #define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n  #define TONE_MAPPING_ACES 0\n  #define TONE_MAPPING_LINEAR 1\n  #define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\n  #ifndef CC_SURFACES_DEBUG_VIEW_SINGLE\n    #define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n  #endif\n  #ifndef CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    #define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n  #endif\n  struct StandardVertInput {\n    highp vec4 position;\n    vec3 normal;\n    vec4 tangent;\n  };\n  layout(location = 0) in vec3 a_position;\n  layout(location = 1) in vec3 a_normal;\n  layout(location = 2) in vec2 a_texCoord;\n  layout(location = 3) in vec4 a_tangent;\n  #if CC_USE_SKINNING\n      layout(location = 4) in u32vec4 a_joints;\n    layout(location = 5) in vec4 a_weights;\n  #endif\n  #if USE_INSTANCING\n    #if CC_USE_BAKED_ANIMATION\n      layout(location = 6) in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(location = 7) in vec4 a_matWorld0;\n    layout(location = 8) in vec4 a_matWorld1;\n    layout(location = 9) in vec4 a_matWorld2;\n    #if CC_USE_LIGHTMAP\n      layout(location = 10) in vec4 a_lightingMapUVParam;\n    #endif\n    #if CC_USE_REFLECTION_PROBE || CC_RECEIVE_SHADOW\n      #if CC_RECEIVE_SHADOW\n      #endif\n      layout(location = 11) in vec4 a_localShadowBiasAndProbeId;\n    #endif\n    #if CC_USE_REFLECTION_PROBE\n      layout(location = 12) in vec4 a_reflectionProbeData;\n    #endif\n    #if CC_USE_LIGHT_PROBE\n      layout(location = 13) in vec4 a_sh_linear_const_r;\n      layout(location = 14) in vec4 a_sh_linear_const_g;\n      layout(location = 15) in vec4 a_sh_linear_const_b;\n    #endif\n  #endif\n  #if CC_USE_MORPH\n      int getVertexId() {\n        return gl_VertexIndex;\n      }\n  #endif\n  highp float decode32 (highp vec4 rgba) {\n    rgba = rgba * 255.0;\n    highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n    highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n    highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n    return Sign * exp2(Exponent - 23.0) * Mantissa;\n  }\n  #if CC_USE_MORPH\n    layout(set = 2, binding = 4) uniform CCMorph {\n      vec4 cc_displacementWeights[15];\n      vec4 cc_displacementTextureInfo;\n    };\n    #if CC_MORPH_TARGET_HAS_POSITION\n      layout(set = 2, binding = 8) uniform sampler2D cc_PositionDisplacements;\n    #endif\n    #if CC_MORPH_TARGET_HAS_NORMAL\n      layout(set = 2, binding = 9) uniform sampler2D cc_NormalDisplacements;\n    #endif\n    #if CC_MORPH_TARGET_HAS_TANGENT\n      layout(set = 2, binding = 10) uniform sampler2D cc_TangentDisplacements;\n    #endif\n    vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n      float pixelIndexF = float(pixelIndex);\n      float x = mod(pixelIndexF, textureResolution.x);\n      float y = floor(pixelIndexF / textureResolution.x);\n      return vec2(x, y);\n    }\n    vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n      return (vec2(location.x, location.y) + .5) / textureResolution;\n    }\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n          ivec2 texSize = textureSize(tex, 0);\n          return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n        }\n    #else\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex * 4;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n        vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n        vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n        return vec4(\n          decode32(texture(tex, x)),\n          decode32(texture(tex, y)),\n          decode32(texture(tex, z)),\n          1.0\n        );\n      }\n    #endif\n    float getDisplacementWeight(int index) {\n      int quot = index / 4;\n      int remainder = index - quot * 4;\n      if (remainder == 0) {\n        return cc_displacementWeights[quot].x;\n      } else if (remainder == 1) {\n        return cc_displacementWeights[quot].y;\n      } else if (remainder == 2) {\n        return cc_displacementWeights[quot].z;\n      } else {\n        return cc_displacementWeights[quot].w;\n      }\n    }\n    vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n    #if CC_MORPH_PRECOMPUTED\n      return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n    #else\n      vec3 result = vec3(0, 0, 0);\n      int nVertices = int(cc_displacementTextureInfo.z);\n      for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n        result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n      }\n      return result;\n    #endif\n    }\n    #if CC_MORPH_TARGET_HAS_POSITION\n    vec3 getPositionDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n    #endif\n    #if CC_MORPH_TARGET_HAS_NORMAL\n    vec3 getNormalDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n    #endif\n    #if CC_MORPH_TARGET_HAS_TANGENT\n    vec3 getTangentDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n    #endif\n    void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n      int vertexId = getVertexId();\n    #if CC_MORPH_TARGET_HAS_POSITION\n      position.xyz = position.xyz + getPositionDisplacement(vertexId);\n    #endif\n    #if CC_MORPH_TARGET_HAS_NORMAL\n      normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n    #endif\n    #if CC_MORPH_TARGET_HAS_TANGENT\n      tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n    #endif\n    }\n    void applyMorph (inout vec4 position) {\n    #if CC_MORPH_TARGET_HAS_POSITION\n      position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n    #endif\n    }\n  #endif\n  #if CC_USE_SKINNING\n    #if CC_USE_BAKED_ANIMATION\n      layout(set = 2, binding = 3) uniform CCSkinningTexture {\n        highp vec4 cc_jointTextureInfo;\n      };\n      layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n        highp vec4 cc_jointAnimInfo;\n      };\n      layout(set = 2, binding = 7) uniform highp sampler2D cc_jointTexture;\n      void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n      {\n        #if USE_INSTANCING\n          highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n        #else\n          highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n        #endif\n        invSize = cc_jointTextureInfo.w;\n        highp float tempY = floor(temp * invSize);\n        x = floor(temp - tempY * cc_jointTextureInfo.x);\n        y = (tempY + 0.5) * invSize;\n      }\n    #else\n      #if CC_USE_REAL_TIME_JOINT_TEXTURE\n        layout(set = 2, binding = 7) uniform highp sampler2D cc_realtimeJoint;\n      #else\n        layout(set = 2, binding = 3) uniform CCSkinning {\n          highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n        };\n      #endif\n    #endif\n    #if CC_USE_BAKED_ANIMATION\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          highp float x, y, invSize;\n          CCGetJointTextureCoords(3.0, i, x, y, invSize);\n          vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n          vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n          vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n          highp float x, y, invSize;\n          CCGetJointTextureCoords(12.0, i, x, y, invSize);\n          vec4 v1 = vec4(\n            decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n            decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n            decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n            decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n            decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n            decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n            decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n            decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n            decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n            decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      #if CC_USE_REAL_TIME_JOINT_TEXTURE\n        #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n          mat4 getJointMatrix (float i) {\n            float x = i;\n            vec4 v1 = texture(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n            vec4 v2 = texture(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n            vec4 v3 = texture(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n            return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n          }\n        #else\n          mat4 getJointMatrix (float i) {\n           float x = 4.0 * i;\n            vec4 v1 = vec4(\n              decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n              decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n              decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n              decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n            );\n            vec4 v2 = vec4(\n              decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n              decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n              decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n              decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n            );\n            vec4 v3 = vec4(\n              decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n              decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n              decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n              decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n            );\n            return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n          }\n        #endif\n      #else\n        mat4 getJointMatrix (float i) {\n          int idx = int(i);\n          vec4 v1 = cc_joints[idx * 3];\n          vec4 v2 = cc_joints[idx * 3 + 1];\n          vec4 v3 = cc_joints[idx * 3 + 2];\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #endif\n    mat4 skinMatrix () {\n      vec4 joints = vec4(a_joints);\n      return getJointMatrix(joints.x) * a_weights.x\n           + getJointMatrix(joints.y) * a_weights.y\n           + getJointMatrix(joints.z) * a_weights.z\n           + getJointMatrix(joints.w) * a_weights.w;\n    }\n    void CCSkin (inout vec4 position) {\n      mat4 m = skinMatrix();\n      position = m * position;\n    }\n    void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n      mat4 m = skinMatrix();\n      position = m * position;\n      normal = (m * vec4(normal, 0.0)).xyz;\n      tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n    }\n  #endif\n  void CCVertInput(inout StandardVertInput In)\n  {\n        In.position = vec4(a_position, 1.0);\n        In.normal = a_normal;\n        In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In.position, In.normal, In.tangent);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In.position, In.normal, In.tangent);\n    #endif\n  }\n  #if !USE_INSTANCING\n    layout(set = 2, binding = 0) uniform CCLocal {\n      highp mat4 cc_matWorld;\n      highp mat4 cc_matWorldIT;\n      highp vec4 cc_lightingMapUVParam;\n      highp vec4 cc_localShadowBias;\n      highp vec4 cc_reflectionProbeData1;\n      highp vec4 cc_reflectionProbeData2;\n      highp vec4 cc_reflectionProbeBlendData1;\n      highp vec4 cc_reflectionProbeBlendData2;\n    };\n  #endif\n  void CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n  {\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      vec3 scale = 1.0 / vec3(length(a_matWorld0.xyz), length(a_matWorld1.xyz), length(a_matWorld2.xyz));\n      vec3 scale2 = scale * scale;\n      matWorldIT = mat4(\n        vec4(a_matWorld0.xyz * scale2.x, 0.0),\n        vec4(a_matWorld1.xyz * scale2.y, 0.0),\n        vec4(a_matWorld2.xyz * scale2.z, 0.0),\n        vec4(0.0, 0.0, 0.0, 1.0)\n      );\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  }\n  layout(set = 1, binding = 0) uniform Constants {\n    vec4 tilingOffset;\n    vec4 tilingOffset2;\n    vec4 albedo;\n    vec4 albedoScaleAndCutoff;\n    vec4 pbrParams;\n    vec4 miscParams;\n    vec4 emissive;\n    vec4 emissiveScaleParam;\n    vec4 highlightColor;\n    vec4 Fresnelcol;\n    vec4 rampParams;\n  };\n  layout(set = 0, binding = 2) uniform CCShadow {\n    highp mat4 cc_matLightView;\n    highp mat4 cc_matLightViewProj;\n    highp vec4 cc_shadowInvProjDepthInfo;\n    highp vec4 cc_shadowProjDepthInfo;\n    highp vec4 cc_shadowProjInfo;\n    mediump vec4 cc_shadowNFLSInfo;\n    mediump vec4 cc_shadowWHPBInfo;\n    mediump vec4 cc_shadowLPNNInfo;\n    lowp vec4 cc_shadowColor;\n    mediump vec4 cc_planarNDInfo;\n  };\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  layout(set = 0, binding = 3) uniform CCCSM {\n    highp vec4 cc_csmViewDir0[4];\n    highp vec4 cc_csmViewDir1[4];\n    highp vec4 cc_csmViewDir2[4];\n    highp vec4 cc_csmAtlas[4];\n    highp mat4 cc_matCSMViewProj[4];\n    highp vec4 cc_csmProjDepthInfo[4];\n    highp vec4 cc_csmProjInfo[4];\n    highp vec4 cc_csmSplitsInfo;\n  };\n#endif\n  #if HAS_SECOND_UV || CC_USE_LIGHTMAP\n    layout(location = 17) in vec2 a_texCoord1;\n  #endif\n  layout(location = 0) out vec2 v_uv;\n  layout(location = 1) out vec2 v_uv1;\n  layout(location = 2) out vec4 v_worldPos;\n  layout(location = 3) out float v_clip_depth;\n  vec4 vert () {\n    StandardVertInput In;\n    CCVertInput(In);\n    mat4 matWorld, matWorldIT;\n    CCGetWorldMatrixFull(matWorld, matWorldIT);\n    v_worldPos = matWorld * In.position;\n    vec4 clipPos = cc_matLightViewProj * v_worldPos;\n    v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n    #if HAS_SECOND_UV\n      v_uv1 = a_texCoord * tilingOffset2.xy + tilingOffset2.zw;\n    #endif\n    v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n    return clipPos;\n  }\nvoid main() { gl_Position = vert(); }","frag":"\n  precision highp float;\n  layout(set = 1, binding = 0) uniform Constants {\n    vec4 tilingOffset;\n    vec4 tilingOffset2;\n    vec4 albedo;\n    vec4 albedoScaleAndCutoff;\n    vec4 pbrParams;\n    vec4 miscParams;\n    vec4 emissive;\n    vec4 emissiveScaleParam;\n    vec4 highlightColor;\n    vec4 Fresnelcol;\n    vec4 rampParams;\n  };\n  vec4 packDepthToRGBA (float depth) {\n    vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n    ret = fract(ret);\n    ret -= vec4(ret.yzw, 0.0) / 255.0;\n    return ret;\n  }\n    #define UnpackBitFromFloat(value, bit) (mod(floor(value / pow(10.0, float(bit))), 10.0) > 0.0)\n   layout(set = 0, binding = 2) uniform CCShadow {\n     highp mat4 cc_matLightView;\n     highp mat4 cc_matLightViewProj;\n     highp vec4 cc_shadowInvProjDepthInfo;\n     highp vec4 cc_shadowProjDepthInfo;\n     highp vec4 cc_shadowProjInfo;\n     mediump vec4 cc_shadowNFLSInfo;\n     mediump vec4 cc_shadowWHPBInfo;\n     mediump vec4 cc_shadowLPNNInfo;\n     lowp vec4 cc_shadowColor;\n     mediump vec4 cc_planarNDInfo;\n   };\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  layout(set = 0, binding = 3) uniform CCCSM {\n    highp vec4 cc_csmViewDir0[4];\n    highp vec4 cc_csmViewDir1[4];\n    highp vec4 cc_csmViewDir2[4];\n    highp vec4 cc_csmAtlas[4];\n    highp mat4 cc_matCSMViewProj[4];\n    highp vec4 cc_csmProjDepthInfo[4];\n    highp vec4 cc_csmProjInfo[4];\n    highp vec4 cc_csmSplitsInfo;\n  };\n#endif\n  layout(location = 0) in vec2 v_uv;\n  layout(location = 1) in vec2 v_uv1;\n  layout(location = 3) in float v_clip_depth;\n  layout(location = 2) in vec4 v_worldPos;\n  #if USE_ALBEDO_MAP\n    layout(set = 1, binding = 1) uniform sampler2D albedoMap;\n  #endif\n  #if USE_ALPHA_TEST\n  #endif\n  vec4 frag () {\n    vec4 baseColor = albedo;\n    #if USE_ALBEDO_MAP\n      baseColor *= texture(albedoMap, ALBEDO_UV);\n    #endif\n    #if USE_ALPHA_TEST\n      if (baseColor.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n    #endif\n    if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n      if (cc_shadowNFLSInfo.z > 0.000001) {\n        vec4 viewStartPos = cc_matLightView * v_worldPos;\n        float dist = length(viewStartPos.xyz);\n        float linearDepth = cc_shadowNFLSInfo.x + (-dist / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x));\n        return vec4(linearDepth, 1.0, 1.0, 1.0);\n      }\n    }\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      return packDepthToRGBA(v_clip_depth);\n    }\n    return vec4(v_clip_depth, 1.0, 1.0, 1.0);\n  }\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCShadow","defines":[]},{"name":"CCCSM","defines":["CC_SUPPORT_CASCADED_SHADOW_MAP"]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","!CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"CCLocal","defines":["!USE_INSTANCING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_realtimeJoint","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","CC_USE_REAL_TIME_JOINT_TEXTURE"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":100,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":68}},"defines":[{"name":"USE_INSTANCING","type":"boolean"},{"name":"CC_USE_SKINNING","type":"boolean"},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean"},{"name":"CC_USE_LIGHTMAP","type":"boolean"},{"name":"CC_USE_REFLECTION_PROBE","type":"boolean"},{"name":"CC_RECEIVE_SHADOW","type":"boolean"},{"name":"CC_USE_LIGHT_PROBE","type":"boolean"},{"name":"CC_USE_MORPH","type":"boolean"},{"name":"CC_MORPH_TARGET_COUNT","type":"number","range":[2,8]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean"},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean"},{"name":"CC_USE_REAL_TIME_JOINT_TEXTURE","type":"boolean"},{"name":"CC_SUPPORT_CASCADED_SHADOW_MAP","type":"boolean"},{"name":"HAS_SECOND_UV","type":"boolean"},{"name":"USE_ALBEDO_MAP","type":"boolean"},{"name":"ALBEDO_UV","type":"string","options":["v_uv","v_uv1"]},{"name":"USE_ALPHA_TEST","type":"boolean"},{"name":"ALPHA_TEST_CHANNEL","type":"string","options":["a","r"]}]}],[{"name":"opaque","passes":[{"program":"../res/shader/edgeLight|standard-vs:vert|standard-fs:frag","properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"tilingOffset2":{"type":16,"value":[2,2,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"type":13,"value":[1],"handleInfo":["pbrParams",0,13]},"roughness":{"type":13,"value":[0.8],"handleInfo":["pbrParams",1,13]},"highlightColor":{"type":16,"value":[0.8,0.8,0.8,1]},"Fresnelcol":{"type":16,"value":[0.9,0.9,0.9,1]},"_fresnelBase":{"type":13,"value":[1],"handleInfo":["rampParams",0,13]},"_fresnelScale":{"type":13,"value":[1],"handleInfo":["rampParams",1,13]},"_fresnelIndensity":{"type":13,"value":[5],"handleInfo":["rampParams",2,13]},"metallic":{"type":13,"value":[0.6],"handleInfo":["pbrParams",2,13]},"SpecularIntensity":{"type":13,"value":[0.5],"handleInfo":["pbrParams",3,13]},"normalStrenth":{"type":13,"value":[1],"handleInfo":["pbrParams",3,13]},"emissive":{"type":16,"value":[0,0,0,1]},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleParam",0,15]},"mainTexture":{"value":"grey","type":28,"handleInfo":["albedoMap",0,28]},"normalMap":{"value":"normal","type":28},"pbrMap":{"value":"grey","type":28},"metallicRoughnessMap":{"value":"grey","type":28},"occlusionMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"albedo":{"type":16,"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"value":[1,1,1,0.5]},"pbrParams":{"type":16,"value":[1,0.8,0.6,1]},"rampParams":{"type":16,"value":[1,1,5,0]},"emissiveScaleParam":{"type":16,"value":[1,1,1,0]},"albedoMap":{"type":28,"value":"grey"}}},{"phase":"deferred","propertyIndex":0,"program":"../res/shader/edgeLight|standard-vs:vert|standard-fs:frag","blendState":{"targets":[{"blend":false},{"blend":false},{"blend":false},{"blend":false}]},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"tilingOffset2":{"type":16,"value":[2,2,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"type":13,"value":[1],"handleInfo":["pbrParams",0,13]},"roughness":{"type":13,"value":[0.8],"handleInfo":["pbrParams",1,13]},"highlightColor":{"type":16,"value":[0.8,0.8,0.8,1]},"Fresnelcol":{"type":16,"value":[0.9,0.9,0.9,1]},"_fresnelBase":{"type":13,"value":[1],"handleInfo":["rampParams",0,13]},"_fresnelScale":{"type":13,"value":[1],"handleInfo":["rampParams",1,13]},"_fresnelIndensity":{"type":13,"value":[5],"handleInfo":["rampParams",2,13]},"metallic":{"type":13,"value":[0.6],"handleInfo":["pbrParams",2,13]},"SpecularIntensity":{"type":13,"value":[0.5],"handleInfo":["pbrParams",3,13]},"normalStrenth":{"type":13,"value":[1],"handleInfo":["pbrParams",3,13]},"emissive":{"type":16,"value":[0,0,0,1]},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleParam",0,15]},"mainTexture":{"value":"grey","type":28,"handleInfo":["albedoMap",0,28]},"normalMap":{"value":"normal","type":28},"pbrMap":{"value":"grey","type":28},"metallicRoughnessMap":{"value":"grey","type":28},"occlusionMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"albedo":{"type":16,"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"value":[1,1,1,0.5]},"pbrParams":{"type":16,"value":[1,0.8,0.6,1]},"rampParams":{"type":16,"value":[1,1,5,0]},"emissiveScaleParam":{"type":16,"value":[1,1,1,0]},"albedoMap":{"type":28,"value":"grey"}}},{"phase":"forward-add","propertyIndex":0,"program":"../res/shader/edgeLight|standard-vs:vert|standard-fs:frag","embeddedMacros":{"CC_FORWARD_ADD":true},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthFunc":2,"depthTest":true,"depthWrite":false},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"tilingOffset2":{"type":16,"value":[2,2,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"type":13,"value":[1],"handleInfo":["pbrParams",0,13]},"roughness":{"type":13,"value":[0.8],"handleInfo":["pbrParams",1,13]},"highlightColor":{"type":16,"value":[0.8,0.8,0.8,1]},"Fresnelcol":{"type":16,"value":[0.9,0.9,0.9,1]},"_fresnelBase":{"type":13,"value":[1],"handleInfo":["rampParams",0,13]},"_fresnelScale":{"type":13,"value":[1],"handleInfo":["rampParams",1,13]},"_fresnelIndensity":{"type":13,"value":[5],"handleInfo":["rampParams",2,13]},"metallic":{"type":13,"value":[0.6],"handleInfo":["pbrParams",2,13]},"SpecularIntensity":{"type":13,"value":[0.5],"handleInfo":["pbrParams",3,13]},"normalStrenth":{"type":13,"value":[1],"handleInfo":["pbrParams",3,13]},"emissive":{"type":16,"value":[0,0,0,1]},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleParam",0,15]},"mainTexture":{"value":"grey","type":28,"handleInfo":["albedoMap",0,28]},"normalMap":{"value":"normal","type":28},"pbrMap":{"value":"grey","type":28},"metallicRoughnessMap":{"value":"grey","type":28},"occlusionMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"albedo":{"type":16,"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"value":[1,1,1,0.5]},"pbrParams":{"type":16,"value":[1,0.8,0.6,1]},"rampParams":{"type":16,"value":[1,1,5,0]},"emissiveScaleParam":{"type":16,"value":[1,1,1,0]},"albedoMap":{"type":28,"value":"grey"}}},{"phase":"shadow-caster","propertyIndex":0,"program":"../res/shader/edgeLight|shadow-caster-vs:vert|shadow-caster-fs:frag","rasterizerState":{"cullMode":1},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"tilingOffset2":{"type":16,"value":[0.2,0.2,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"type":13,"value":[1],"handleInfo":["pbrParams",0,13]},"roughness":{"type":13,"value":[0.8],"handleInfo":["pbrParams",1,13]},"highlightColor":{"type":16,"value":[0.8,0.8,0.8,1]},"Fresnelcol":{"type":16,"value":[0.9,0.9,0.9,1]},"_fresnelBase":{"type":13,"value":[1],"handleInfo":["rampParams",0,13]},"_fresnelScale":{"type":13,"value":[1],"handleInfo":["rampParams",1,13]},"_fresnelIndensity":{"type":13,"value":[5],"handleInfo":["rampParams",2,13]},"metallic":{"type":13,"value":[0.6],"handleInfo":["pbrParams",2,13]},"normalStrenth":{"type":13,"value":[1],"handleInfo":["pbrParams",3,13]},"emissive":{"type":16,"value":[0,0,0,1]},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleParam",0,15]},"mainTexture":{"value":"grey","type":28,"handleInfo":["albedoMap",0,28]},"albedo":{"type":16,"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"value":[1,1,1,0.5]},"pbrParams":{"type":16,"value":[1,0.8,0.6,1]},"rampParams":{"type":16,"value":[1,1,5,0]},"emissiveScaleParam":{"type":16,"value":[1,1,1,0]},"albedoMap":{"type":28,"value":"grey"}}}]},{"name":"transparent","passes":[{"program":"../res/shader/edgeLight|standard-vs:vert|standard-fs:frag","blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"tilingOffset2":{"type":16,"value":[2,2,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"type":13,"value":[1],"handleInfo":["pbrParams",0,13]},"roughness":{"type":13,"value":[0.8],"handleInfo":["pbrParams",1,13]},"highlightColor":{"type":16,"value":[0.8,0.8,0.8,1]},"Fresnelcol":{"type":16,"value":[0.9,0.9,0.9,1]},"_fresnelBase":{"type":13,"value":[1],"handleInfo":["rampParams",0,13]},"_fresnelScale":{"type":13,"value":[1],"handleInfo":["rampParams",1,13]},"_fresnelIndensity":{"type":13,"value":[5],"handleInfo":["rampParams",2,13]},"metallic":{"type":13,"value":[0.6],"handleInfo":["pbrParams",2,13]},"SpecularIntensity":{"type":13,"value":[0.5],"handleInfo":["pbrParams",3,13]},"normalStrenth":{"type":13,"value":[1],"handleInfo":["pbrParams",3,13]},"emissive":{"type":16,"value":[0,0,0,1]},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleParam",0,15]},"mainTexture":{"value":"grey","type":28,"handleInfo":["albedoMap",0,28]},"normalMap":{"value":"normal","type":28},"pbrMap":{"value":"grey","type":28},"metallicRoughnessMap":{"value":"grey","type":28},"occlusionMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"albedo":{"type":16,"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"value":[1,1,1,0.5]},"pbrParams":{"type":16,"value":[1,0.8,0.6,1]},"rampParams":{"type":16,"value":[1,1,5,0]},"emissiveScaleParam":{"type":16,"value":[1,1,1,0]},"albedoMap":{"type":28,"value":"grey"}}},{"phase":"forward-add","propertyIndex":0,"program":"../res/shader/edgeLight|standard-vs:vert|standard-fs:frag","embeddedMacros":{"CC_FORWARD_ADD":true},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthFunc":2,"depthTest":true,"depthWrite":false},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"tilingOffset2":{"type":16,"value":[2,2,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"type":13,"value":[1],"handleInfo":["pbrParams",0,13]},"roughness":{"type":13,"value":[0.8],"handleInfo":["pbrParams",1,13]},"highlightColor":{"type":16,"value":[0.8,0.8,0.8,1]},"Fresnelcol":{"type":16,"value":[0.9,0.9,0.9,1]},"_fresnelBase":{"type":13,"value":[1],"handleInfo":["rampParams",0,13]},"_fresnelScale":{"type":13,"value":[1],"handleInfo":["rampParams",1,13]},"_fresnelIndensity":{"type":13,"value":[5],"handleInfo":["rampParams",2,13]},"metallic":{"type":13,"value":[0.6],"handleInfo":["pbrParams",2,13]},"SpecularIntensity":{"type":13,"value":[0.5],"handleInfo":["pbrParams",3,13]},"normalStrenth":{"type":13,"value":[1],"handleInfo":["pbrParams",3,13]},"emissive":{"type":16,"value":[0,0,0,1]},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleParam",0,15]},"mainTexture":{"value":"grey","type":28,"handleInfo":["albedoMap",0,28]},"normalMap":{"value":"normal","type":28},"pbrMap":{"value":"grey","type":28},"metallicRoughnessMap":{"value":"grey","type":28},"occlusionMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"albedo":{"type":16,"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"value":[1,1,1,0.5]},"pbrParams":{"type":16,"value":[1,0.8,0.6,1]},"rampParams":{"type":16,"value":[1,1,5,0]},"emissiveScaleParam":{"type":16,"value":[1,1,1,0]},"albedoMap":{"type":28,"value":"grey"}}},{"phase":"shadow-caster","propertyIndex":0,"program":"../res/shader/edgeLight|shadow-caster-vs:vert|shadow-caster-fs:frag","rasterizerState":{"cullMode":1},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"tilingOffset2":{"type":16,"value":[0.2,0.2,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"type":13,"value":[1],"handleInfo":["pbrParams",0,13]},"roughness":{"type":13,"value":[0.8],"handleInfo":["pbrParams",1,13]},"highlightColor":{"type":16,"value":[0.8,0.8,0.8,1]},"Fresnelcol":{"type":16,"value":[0.9,0.9,0.9,1]},"_fresnelBase":{"type":13,"value":[1],"handleInfo":["rampParams",0,13]},"_fresnelScale":{"type":13,"value":[1],"handleInfo":["rampParams",1,13]},"_fresnelIndensity":{"type":13,"value":[5],"handleInfo":["rampParams",2,13]},"metallic":{"type":13,"value":[0.6],"handleInfo":["pbrParams",2,13]},"normalStrenth":{"type":13,"value":[1],"handleInfo":["pbrParams",3,13]},"emissive":{"type":16,"value":[0,0,0,1]},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleParam",0,15]},"mainTexture":{"value":"grey","type":28,"handleInfo":["albedoMap",0,28]},"albedo":{"type":16,"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"value":[1,1,1,0.5]},"pbrParams":{"type":16,"value":[1,0.8,0.6,1]},"rampParams":{"type":16,"value":[1,1,5,0]},"emissiveScaleParam":{"type":16,"value":[1,1,1,0]},"albedoMap":{"type":28,"value":"grey"}}}]}]]],0,0,[],[],[]],[[{"name":"game_success_video_icon@2x","rect":{"x":0,"y":0,"width":54,"height":54},"offset":{"x":0,"y":0},"originalSize":{"width":54,"height":54},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-27,-27,0,27,-27,0,-27,27,0,27,27,0],"indexes":[0,1,2,2,1,3],"uv":[0,54,54,54,0,0,54,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-27,"y":-27,"z":0},"maxPos":{"x":27,"y":27,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[2],[58]],[[{"name":"game_success_video_icon_yellow_buttun@2x","rect":{"x":0,"y":0,"width":527,"height":125},"offset":{"x":0,"y":0},"originalSize":{"width":527,"height":125},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-263.5,-62.5,0,263.5,-62.5,0,-263.5,62.5,0,263.5,62.5,0],"indexes":[0,1,2,2,1,3],"uv":[0,125,527,125,0,0,527,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-263.5,"y":-62.5,"z":0},"maxPos":{"x":263.5,"y":62.5,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[2],[59]],[[{"name":"game_stone_icon@2x","rect":{"x":0,"y":0,"width":63,"height":80},"offset":{"x":0,"y":0},"originalSize":{"width":63,"height":80},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-31.5,-40,0,31.5,-40,0,-31.5,40,0,31.5,40,0],"indexes":[0,1,2,2,1,3],"uv":[0,80,63,80,0,0,63,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-31.5,"y":-40,"z":0},"maxPos":{"x":31.5,"y":40,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[2],[60]],[[[20,"winLight01"],[29,"winLight01",[[31,"Plane<ModelComponent>",-2,[0,"e0uHCYkZ1D1I9glcT6oLf2"],[0],[3],1],[4,-3,[0,"4c9xy/feJFW6aHRxanMaso"],[2],3]],[1,"d7AB+KPulPr6Wi1VbaT/EJ",null,null,null,-1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,40,40,40],[1,90,0,0]]],0,[0,6,1,0,0,1,0,0,1,0,7,1,3],[0,0,0,0],[-1,4,-1,3],[61,5,3,3]],[[{"name":"game_turntable_arrow@2x","rect":{"x":0,"y":0,"width":131,"height":205},"offset":{"x":0,"y":0},"originalSize":{"width":131,"height":205},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-65.5,-102.5,0,65.5,-102.5,0,-65.5,102.5,0,65.5,102.5,0],"indexes":[0,1,2,2,1,3],"uv":[0,205,131,205,0,0,131,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-65.5,"y":-102.5,"z":0},"maxPos":{"x":65.5,"y":102.5,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[2],[62]],[[{"name":"game_turntable_bg@2x","rect":{"x":0,"y":0,"width":574,"height":308},"offset":{"x":0,"y":0},"originalSize":{"width":574,"height":308},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-287,-154,0,287,-154,0,-287,154,0,287,154,0],"indexes":[0,1,2,2,1,3],"uv":[0,308,574,308,0,0,574,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-287,"y":-154,"z":0},"maxPos":{"x":287,"y":154,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[2],[63]],[[{"name":"game_success_bg3@2x","rect":{"x":0,"y":0,"width":528,"height":140},"offset":{"x":0,"y":0},"originalSize":{"width":528,"height":140},"rotated":false,"capInsets":[63,33,63,33],"vertices":{"rawPosition":[-264,-70,0,264,-70,0,-264,70,0,264,70,0],"indexes":[0,1,2,2,1,3],"uv":[0,140,528,140,0,0,528,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-264,"y":-70,"z":0},"maxPos":{"x":264,"y":70,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[2],[64]],[[{"name":"game_success_bule_buttun@2x","rect":{"x":0,"y":0,"width":377,"height":128},"offset":{"x":0,"y":0},"originalSize":{"width":377,"height":128},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-188.5,-64,0,188.5,-64,0,-188.5,64,0,188.5,64,0],"indexes":[0,1,2,2,1,3],"uv":[0,128,377,128,0,0,377,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-188.5,"y":-64,"z":0},"maxPos":{"x":188.5,"y":64,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[2],[65]],[[[20,"winLight02"],[29,"winLight02",[[31,"Plane<ModelComponent>",-2,[0,"e0uHCYkZ1D1I9glcT6oLf2"],[0],[3],1],[4,-3,[0,"4c9xy/feJFW6aHRxanMaso"],[2],3]],[1,"d7AB+KPulPr6Wi1VbaT/EJ",null,null,null,-1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,40,40,40],[1,90,0,0]]],0,[0,6,1,0,0,1,0,0,1,0,7,1,3],[0,0,0,0],[-1,4,-1,3],[66,5,3,3]],[[{"name":"game_blue_people_icon@2x","rect":{"x":0,"y":0,"width":60,"height":87},"offset":{"x":0,"y":0},"originalSize":{"width":60,"height":87},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-30,-43.5,0,30,-43.5,0,-30,43.5,0,30,43.5,0],"indexes":[0,1,2,2,1,3],"uv":[0,87,60,87,0,0,60,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-30,"y":-43.5,"z":0},"maxPos":{"x":30,"y":43.5,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[2],[67]],[[[30,"winLight03",1,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[8,9],[68,6]],[[[30,"winLight01",1,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[8,9],[69,6]],[[[42,"diamond",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{"USE_INSTANCING":true,"USE_ALBEDO_MAP":true,"USE_PBR_MAP":true},{},{}],[[[{"occlusion":-1,"_fresnelIndensity":4,"metallic":0},"highlightColor",8,[4,4293892095],"Fresnelcol",8,[4,4289003736],"mainTexture",6,0],{},{}],11,0,0]]],0,0,[0,0],[8,9],[70,71]]]]
